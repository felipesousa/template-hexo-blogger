{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0},{"_id":"themes/landscape/source/js/main.js","path":"js/main.js","modified":0},{"_id":"themes/landscape/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0},{"_id":"themes/landscape/source/js/jquery-github.js","path":"js/jquery-github.js","modified":0},{"_id":"themes/landscape/source/js/elevator.min.js","path":"js/elevator.min.js","modified":0},{"_id":"themes/landscape/source/images/posts/pro.jpg","path":"images/posts/pro.jpg","modified":0},{"_id":"themes/landscape/source/images/posts/mongodb.jpg","path":"images/posts/mongodb.jpg","modified":0},{"_id":"themes/landscape/source/images/posts/linha2015-post.jpg","path":"images/posts/linha2015-post.jpg","modified":0},{"_id":"themes/landscape/source/images/posts/jekyll-post.jpg","path":"images/posts/jekyll-post.jpg","modified":0},{"_id":"themes/landscape/source/images/posts/jekyll-exampler.png","path":"images/posts/jekyll-exampler.png","modified":0},{"_id":"themes/landscape/source/images/posts/git.jpg","path":"images/posts/git.jpg","modified":0},{"_id":"themes/landscape/source/images/posts/fif2015.jpg","path":"images/posts/fif2015.jpg","modified":0},{"_id":"themes/landscape/source/images/posts/fif2014-post.jpg","path":"images/posts/fif2014-post.jpg","modified":0},{"_id":"themes/landscape/source/images/posts/elemos-post.jpg","path":"images/posts/elemos-post.jpg","modified":0},{"_id":"themes/landscape/source/images/posts/dash.png","path":"images/posts/dash.png","modified":0},{"_id":"themes/landscape/source/images/posts/coffeescript-goodside.png","path":"images/posts/coffeescript-goodside.png","modified":0},{"_id":"themes/landscape/source/images/posts/angularjs-forms.png","path":"images/posts/angularjs-forms.png","modified":0},{"_id":"themes/landscape/source/images/posts/angularjs-filters.png","path":"images/posts/angularjs-filters.png","modified":0},{"_id":"themes/landscape/source/images/header/nug.png","path":"images/header/nug.png","modified":0},{"_id":"themes/landscape/source/images/header/ionic.png","path":"images/header/ionic.png","modified":0},{"_id":"themes/landscape/source/images/header/github-project.png","path":"images/header/github-project.png","modified":0},{"_id":"themes/landscape/source/images/header/fa-favicon.png","path":"images/header/fa-favicon.png","modified":0},{"_id":"themes/landscape/source/images/header/bio-photo.jpg","path":"images/header/bio-photo.jpg","modified":0},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0},{"_id":"themes/landscape/source/images/header/bio--photo.jpg","path":"images/header/bio--photo.jpg","modified":0},{"_id":"themes/landscape/source/images/posts/background.jpg","path":"images/posts/background.jpg","modified":0}],"Cache":[{"_id":"source/_posts/A-importancia-de-prototipar.md","shasum":"fdfbb86686b8214b2702791ce7a9b32ef713d539","modified":1454683707000},{"_id":"source/_posts/Angularjs-filtros.md","shasum":"d4039f0c52d0ace5d39eca962b9d8a458dbb9d19","modified":1454683707000},{"_id":"source/_posts/Angularjs-formularios.md","shasum":"2be472db03b97dd367e7d0e765a2862e4dd22ec3","modified":1454683707000},{"_id":"source/_posts/Um-ano-como-front-end-developer.md","shasum":"3a34859724b37d9175505227d1911166c4c70663","modified":1454683707000},{"_id":"source/_posts/Um-pouco-de-MongoDB.md","shasum":"4cfbaca4d8b219cd3d95ba826418eb252bc46ac9","modified":1454683707000},{"_id":"source/_posts/basico-em-git-parte1.md","shasum":"f09304f4579c701d9b40ba2e5013877b5c029ef9","modified":1454683707000},{"_id":"source/_posts/basico-em-git-parte2.md","shasum":"275199c465d859d494301e0782128f3c0270fdc6","modified":1454683707000},{"_id":"source/_posts/como-instalar-jekyll-no-linux.md","shasum":"cbc66b584802a17ba3da228799e6d8759803cc79","modified":1454683707000},{"_id":"source/_posts/um-pouco-de-linux.md","shasum":"ea65a9b99955d0645accefd4baaf1652becdd379","modified":1454683707000},{"_id":"source/about/index.md","shasum":"a5a204350d89ad4149a3ad67a3852a80f9585bb2","modified":1454683707000},{"_id":"source/talk/index.md","shasum":"d85e8c46a386b3e7a847af8751d46858f7319fd2","modified":1454683707000},{"_id":"source/_posts/coffeescript-goodside.md","shasum":"9777ad83b46800deb406f3394a83c876676002ce","modified":1454871444000},{"_id":"themes/landscape/Gruntfile.js","shasum":"dff6c949c66dda6ba8599a652f4c10719dd7df71","modified":1454683707000},{"_id":"themes/landscape/LICENSE","shasum":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1454683707000},{"_id":"themes/landscape/README.md","shasum":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1454683707000},{"_id":"themes/landscape/_config.yml","shasum":"2512f0563dc8ba3cd5dbc62e045ae0c5042fbcad","modified":1454869445000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","shasum":"76da34f635f0a142c35121f2fd408a90698b99c4","modified":1454683707000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","shasum":"ae56ab948fc3f0776620ec435f7dd7d4b77c6dad","modified":1454683707000},{"_id":"themes/landscape/layout/_partial/archive.ejs","shasum":"71f2b6e1ec23a04c46803a02ee0f079310db39b8","modified":1454683707000},{"_id":"themes/landscape/layout/_partial/footer.ejs","shasum":"66b7543b972fb951117f1d59d4dc6e5bc25fb131","modified":1454683707000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","shasum":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1454683707000},{"_id":"themes/landscape/layout/_partial/head.ejs","shasum":"69125836e5db82ef296261e70fb71ff5b7ba34f0","modified":1454683707000},{"_id":"themes/landscape/layout/_partial/header.ejs","shasum":"4f95b34d925d8bfd677d1f0463f58645d8e9f916","modified":1456621986000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","shasum":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1454683707000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","shasum":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1454683707000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","shasum":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1454683707000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","shasum":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1454683707000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","shasum":"f75ce31ba90e0410066d59982fb5663d79907bbf","modified":1454683707000},{"_id":"themes/landscape/layout/_partial/article.ejs","shasum":"e8b97be3f877ecca593deda4e7e243e3988d3481","modified":1454785198000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","shasum":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1454683707000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","shasum":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1454683707000},{"_id":"themes/landscape/layout/_widget/archive.ejs","shasum":"985fbeb01142b9d526cda8ebc372c1d361d69a6b","modified":1454683707000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","shasum":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1454683707000},{"_id":"themes/landscape/layout/archive.ejs","shasum":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1454683707000},{"_id":"themes/landscape/layout/index.ejs","shasum":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1454683707000},{"_id":"themes/landscape/layout/category.ejs","shasum":"765426a9c8236828dc34759e604cc2c52292835a","modified":1454683707000},{"_id":"themes/landscape/layout/_widget/tag.ejs","shasum":"b3f321ddda6be2702a286d5b11af9533509506fb","modified":1454683707000},{"_id":"themes/landscape/layout/_widget/category.ejs","shasum":"36ab37878129d152e3cbdeb839c08e52af1acd58","modified":1454683707000},{"_id":"themes/landscape/layout/page.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1454683707000},{"_id":"themes/landscape/layout/layout.ejs","shasum":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1454683707000},{"_id":"themes/landscape/scripts/fancybox.js","shasum":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1454683707000},{"_id":"themes/landscape/layout/tag.ejs","shasum":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1454683707000},{"_id":"themes/landscape/package.json","shasum":"104f8b8b71808aefa59195a7b40e2fac6e3a733a","modified":1454683707000},{"_id":"themes/landscape/layout/post.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1454683707000},{"_id":"themes/landscape/source/css/_extend.styl","shasum":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1454683707000},{"_id":"themes/landscape/source/css/_partial/footer.styl","shasum":"a9467b52804b947acdf13852bef1d777464b55cc","modified":1454683707000},{"_id":"themes/landscape/source/css/_partial/comment.styl","shasum":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1454683707000},{"_id":"themes/landscape/source/css/_partial/article.styl","shasum":"98d49e9e8f79fedbe9d76bd1361fd4ca841fdb14","modified":1454683707000},{"_id":"themes/landscape/source/css/_partial/archive.styl","shasum":"5047d28bdbb91cbfcb8c26f3d1960b5a15722ffa","modified":1454683707000},{"_id":"themes/landscape/source/css/_partial/header.styl","shasum":"0151efbf0490cf5621bf516d921a0da922caa295","modified":1456621922000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","shasum":"36eefe6332b86b66023a9884b754d305235846b4","modified":1454683707000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","shasum":"e8500bf8e7283443b47d4c460cb2261904788200","modified":1454683707000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","shasum":"890349df5145abf46ce7712010c89237900b3713","modified":1454683707000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","shasum":"bc5487b9a0bfe5f745423331824d3f3637ccd430","modified":1454683707000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","shasum":"b7bdc11effa98c6d88850eff75634e2ea9207c14","modified":1454683707000},{"_id":"themes/landscape/source/css/_util/grid.styl","shasum":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1454683707000},{"_id":"themes/landscape/source/css/_util/mixin.styl","shasum":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1454683707000},{"_id":"themes/landscape/source/css/_variables.styl","shasum":"1ef15ef0d5176e2e7e614f239585dffc529d9252","modified":1454683707000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","shasum":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1454683707000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","shasum":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1454683707000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","shasum":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1454683707000},{"_id":"themes/landscape/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1454683707000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1454683707000},{"_id":"themes/landscape/source/css/style.styl","shasum":"b75c8cafd69e73e7c420279e3328885174ac4074","modified":1454683707000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1454683707000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1454683707000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1454683707000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1454683707000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1454683707000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1454683707000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1454683707000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1454683707000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1454683707000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","shasum":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1454683707000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","shasum":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1454683707000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1454683707000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1454683707000},{"_id":"themes/landscape/source/images/header/bio-photo.jpg","shasum":"bfd5fe999ed7d6cb5c989763111fac4ef7714829","modified":1449543569000},{"_id":"themes/landscape/source/images/header/fa-favicon.png","shasum":"0ba6f37127de36732aa684cb92a7707b7457d4cd","modified":1454683707000},{"_id":"themes/landscape/source/images/header/github-project.png","shasum":"0f4b8ec7206eea1e2582e79ab3e236c89ad81c43","modified":1454683707000},{"_id":"themes/landscape/source/images/posts/angularjs-forms.png","shasum":"cdc1667dad7366b8992e230f4a10d4c97c84065c","modified":1454683707000},{"_id":"themes/landscape/source/images/header/ionic.png","shasum":"9d3601886b1dd3ff45595e54a612d4ced7cfa31b","modified":1454683707000},{"_id":"themes/landscape/source/images/header/nug.png","shasum":"b3f639706d974d132ac4cf69b2a976b86dd02441","modified":1454683707000},{"_id":"themes/landscape/source/images/posts/angularjs-filters.png","shasum":"2e99e38beeca3f0550d0dd445ceb6a52f61cc767","modified":1454683707000},{"_id":"themes/landscape/source/images/posts/elemos-post.jpg","shasum":"3b1568cdc5384b679e8a0c7f9dd91ced4a25fa86","modified":1454683707000},{"_id":"themes/landscape/source/images/posts/git.jpg","shasum":"f93c0e79dc135a6281e238af313532d168f6350e","modified":1454683707000},{"_id":"themes/landscape/source/images/posts/jekyll-post.jpg","shasum":"26a284644904db409afbfc2a7ddca6a9e60ddf6f","modified":1454683707000},{"_id":"themes/landscape/source/images/posts/jekyll-exampler.png","shasum":"cdcb49b29223bde09713a9f0451076b99dea36b6","modified":1454683707000},{"_id":"themes/landscape/source/images/posts/mongodb.jpg","shasum":"4a62a19601169e445403dccd2a190fd5a6dc7e95","modified":1454683707000},{"_id":"themes/landscape/source/js/elevator.min.js","shasum":"d7ac15afc5823e208c0057475cb88a06a45eef57","modified":1454683707000},{"_id":"themes/landscape/source/js/jquery-github.js","shasum":"94a141fa474ec5022f7c397b4fd3ff92405ab755","modified":1454683707000},{"_id":"themes/landscape/source/js/main.js","shasum":"6a6893f26867f0f2eeed66a1831ffe7c67b581de","modified":1454683707000},{"_id":"themes/landscape/source/js/script.js","shasum":"c3fb62ba3e1ea18617b3ad2fe1a144eefbc504da","modified":1454683707000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","shasum":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1454683707000},{"_id":"themes/landscape/source/images/posts/dash.png","shasum":"ca750454f97e2d592dfa2a1882656035fa7423be","modified":1454683707000},{"_id":"themes/landscape/source/images/posts/fif2014-post.jpg","shasum":"0fe3c3003b4735e283670a5285d75cecd040ad60","modified":1454683707000},{"_id":"themes/landscape/source/images/posts/fif2015.jpg","shasum":"288cbab60f5db46bac70e28081c57e5ca6fd0312","modified":1454683707000},{"_id":"themes/landscape/source/images/posts/linha2015-post.jpg","shasum":"1c6f423dd6e6773c07d089a38fba1857462233a6","modified":1454683707000},{"_id":"themes/landscape/source/images/posts/pro.jpg","shasum":"79516f7a640062ef8aa8b3c49d4c67118d91685c","modified":1454683707000},{"_id":"themes/landscape/source/js/jquery.min.js","shasum":"fdfd441e66831bfb8809e8cb69c2c3cd26b5d7c2","modified":1454683707000},{"_id":"themes/landscape/source/images/posts/coffeescript-goodside.png","shasum":"473ace33c4750e0d654d9b190b9f094aeca00b41","modified":1454791252000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","shasum":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1454683707000},{"_id":"themes/landscape/source/css/images/banner.jpg","shasum":"843d9d47bf2b7b75495db11b3d765efaaae442a9","modified":1454683707000},{"_id":"themes/landscape/source/images/header/bio--photo.jpg","shasum":"eaf1a584ecea5a5eea8487d5f77190ba7ae63d5c","modified":1454683707000},{"_id":"themes/landscape/source/images/posts/background.jpg","shasum":"c2c88e4d54ecb8943c33c14b3f4acc7500d27aad","modified":1455058227000}],"Category":[],"Data":[],"Page":[{"title":"Talks","date":"2015-11-21T21:07:00.000Z","comments":1,"_content":"\n<div class='project'>\n\t<div class='project-header'>\n\t\t<img src='/images/header/nug.png' class='project-img' alt='' />\n\t</div>\n\t<div class='project-content'>\n\t\t<a href=\"http://nug-ce.org\" target=\"_blank\" ><h4 class='title'> 1º Meetup NodeJS Ceará </h4> </a>\n\t\t<span class='description'> O intuito da talk era falar sobre uma forma simples, direta e rápida de se criar um blog por meio dos Geradores Estáticos, abordar alguns tipos de geradores e como se criar um rápido blog utilizando HexoJS. <a href=\"https://felipesousa.github.io/talks/NUG-CE/\" target='_blank' > Ver slides.</a></span>\n\t</div>\n</div>\n\n<hr/>\n\n<div class='project'>\n\t<div class='project-header'>\n\t\t<img src='/images/header/ionic.png' class='project-img' alt='' />\n\t</div>\n\t<div class='project-content'>\n\t\t<a href=\"http://www.meetup.com/Ionic-Ceara/events/227012482/\" target=\"_blank\" ><h4 class='title'> 2º Meetup Ionic Ceará </h4> </a>\n\t\t<span class='description'> Geralmente quando começamos um projeto, temos por cultura esquecer de alguns pontos que podem nos ajudar no desenvolvimento do projeto. O intuito da talk era mostrar algumas etapas que mudam a nossa visão sobre o desenvolvimento de um projeto, usando algumas ferramentas como o Ionic Creator entre outras.<a href=\"http://felipesousa.github.io/talks/IonicMeetup/\" target='_blank' > Ver slides.</a></span>\n\t</div>\n</div>\n","source":"talk/index.md","raw":"title: Talks\ndate: 2015-11-21 18:07:00\ncomments: true\n---\n\n<div class='project'>\n\t<div class='project-header'>\n\t\t<img src='/images/header/nug.png' class='project-img' alt='' />\n\t</div>\n\t<div class='project-content'>\n\t\t<a href=\"http://nug-ce.org\" target=\"_blank\" ><h4 class='title'> 1º Meetup NodeJS Ceará </h4> </a>\n\t\t<span class='description'> O intuito da talk era falar sobre uma forma simples, direta e rápida de se criar um blog por meio dos Geradores Estáticos, abordar alguns tipos de geradores e como se criar um rápido blog utilizando HexoJS. <a href=\"https://felipesousa.github.io/talks/NUG-CE/\" target='_blank' > Ver slides.</a></span>\n\t</div>\n</div>\n\n<hr/>\n\n<div class='project'>\n\t<div class='project-header'>\n\t\t<img src='/images/header/ionic.png' class='project-img' alt='' />\n\t</div>\n\t<div class='project-content'>\n\t\t<a href=\"http://www.meetup.com/Ionic-Ceara/events/227012482/\" target=\"_blank\" ><h4 class='title'> 2º Meetup Ionic Ceará </h4> </a>\n\t\t<span class='description'> Geralmente quando começamos um projeto, temos por cultura esquecer de alguns pontos que podem nos ajudar no desenvolvimento do projeto. O intuito da talk era mostrar algumas etapas que mudam a nossa visão sobre o desenvolvimento de um projeto, usando algumas ferramentas como o Ionic Creator entre outras.<a href=\"http://felipesousa.github.io/talks/IonicMeetup/\" target='_blank' > Ver slides.</a></span>\n\t</div>\n</div>\n","updated":"2016-02-05T14:48:27.000Z","path":"talk/index.html","layout":"page","_id":"cil5u7s130007x4w88e5pouno"},{"title":"Sobre mim","date":"2015-05-20T00:11:29.000Z","comments":0,"_content":"<img class='bio-photo-about' src=\"/images/header/bio-photo.jpg\" alt=\"sobre mim\">\n\nMeu nome é Luis Felipe Cavalcante Sousa, nasci e moro em Fortaleza-CE, sou Desenvolvedor Front-end, sou apaixonado pela web, pelo mundo open source, comecei com desenvolvimento com apenas 13 anos onde criava pequenos blog’s no Blogger, depois de um tempo aumentei a minha curiosidade para saber como que de fato ocorria por trás da mágica toda!\n\n\nA partir daí comecei a estudar sobre desenvolvimento e me apaixonei loucamente pelo Front-End, hoje cá estou eu, escrevendo artigos, compartilhando o que eu aprendi, com o blog pretendo aumentar o número de leitores - antigamente, apenas meu amigos ouviam o que eu aprendia - procurar muito mais cabeças loucas por conteúdo, que procuram aprender.\n\n\nDesde de muito novo quis aprender os segredos do mundo Front-end - o que são, o que comem, como vivem, rs - fui atrás e aprendi muitos dos meus conhecimentos em blog’s pessoais tais como esse blog.\n\n\nDe alguma forma eu queria ser grato, manter uma linhagem eu diria e ao mesmo tempo aprender, já que quando ensinamos, aprendemos 2 vezes!\n\n","source":"about/index.md","raw":"title: \"Sobre mim\"\ndate: 2015-05-19 21:11:29\ncomments: false\n---\n<img class='bio-photo-about' src=\"/images/header/bio-photo.jpg\" alt=\"sobre mim\">\n\nMeu nome é Luis Felipe Cavalcante Sousa, nasci e moro em Fortaleza-CE, sou Desenvolvedor Front-end, sou apaixonado pela web, pelo mundo open source, comecei com desenvolvimento com apenas 13 anos onde criava pequenos blog’s no Blogger, depois de um tempo aumentei a minha curiosidade para saber como que de fato ocorria por trás da mágica toda!\n\n\nA partir daí comecei a estudar sobre desenvolvimento e me apaixonei loucamente pelo Front-End, hoje cá estou eu, escrevendo artigos, compartilhando o que eu aprendi, com o blog pretendo aumentar o número de leitores - antigamente, apenas meu amigos ouviam o que eu aprendia - procurar muito mais cabeças loucas por conteúdo, que procuram aprender.\n\n\nDesde de muito novo quis aprender os segredos do mundo Front-end - o que são, o que comem, como vivem, rs - fui atrás e aprendi muitos dos meus conhecimentos em blog’s pessoais tais como esse blog.\n\n\nDe alguma forma eu queria ser grato, manter uma linhagem eu diria e ao mesmo tempo aprender, já que quando ensinamos, aprendemos 2 vezes!\n\n","updated":"2016-02-05T14:48:27.000Z","path":"about/index.html","layout":"page","_id":"cil5u7s160008x4w8b6duz2xz"}],"Post":[{"title":"A importância de prototipar","date":"2015-04-10T03:00:00.000Z","comments":1,"music":"TFK - Set me on fire","musicLink":"https://open.spotify.com/track/6CHmPcd0X85BWVVFfHjYVI","timeRead":"4 minutos","_content":"\n<img src=\"/images/posts/pro.jpg\" alt=\"A importância de Prototipar\" title=\"A importância de Prototipar\">\n\nHá alguns meses, comecei a procurar arduamente processos que ajudam bastante no desenvolvimento e a organização de um projeto. Dentre vários, a prototipação foi uma delas, que visa de forma simples, ver um pouco do modelo antes de tudo...\n\n<!--more-->\n\n\n## O que é prototipar?\n\nNo geral, prototipar é quando desenhamos o modelo como desejamos criar a nossa aplicação, projeto, etc. O protótipo é como uma prévia do que vai ser a aplicacao no fim do desenvolvimento.\n\n### Okay! Mais porque tão importante?\n\nPrototipar nos auxilia em vários setores, tanto na maior organização do nosso projeto, mais também como serve de consulta para criarmos os códigos em si. Vamos a um exemplo, vamos supor que temos que criar uma página que vai conter nela dezenas de informações, e cada uma dessas informações devem estar em lugares diferentes na página, o desenvolvedor tendo uma visão gráfica de como vai ficar aquela informação ou o que quer que seja, vai ter mais facilidade em entender o layout, logo, terá mais facilidade de desenvolver.\n\n### O que é necessário para comecar a prototipar?\n\nÉ claro que não basta ter uma ideia na cabeça e começar a desenhar de qualquer forma, antes de tudo isso devemos ter conhecimento total sobre o projeto, qual o foco do mesmo, etc. Recolher as informações é um passo importantíssimo para criar um Prototipo de **QUALIDADE**.\n\n### Abstração de qualquer tecnologia\n\nEsse passo é extremamente importante para não entrar em processos que não fazem parte do processo de prototipação, se liberte de qualquer tecnologia/ferramenta para criar o mesmo, recolha as informações e vá aos poucos montando seu protótipo, se prender a tecnologias, definir quais ferramentas vão ser usadas logo de imediato vão fazer com que o projeto \"avance\" bastante, sem ao menos ter começado de fato!\n\n### Defina os lugares não tamanhos\n\nComo de fato será um desenho, delimitar tamanhos, larguras, entre outros é uma péssima pedida, já que o projeto pode sofrer algumas alterações e voce consequentemente deverá mudar algo que provavelmente demorou para criar. O aconselhável é criar uma estrutura que possa ser modificada caso venha ser preciso a alteração, invista na praticidade, é pra isso que serve os protótipos.\n\n### Converse com a equipe\n\nFazer reuniões com a equipe é essencial para que possamos criar algo que seja fácil de entender e compreender. Caso seja um projeto pessoal, caso use GitHub, ou qualquer outra ferramenta para Deploy, crie uma documentação para explicar o foco ou o desejo para o futuro projeto, para caso alguem deseje contribuir, ficar mais simples de entender e colaborar.\n\n\n### do rabisco ao gráfico\n\nNão importa o que você usará para iniciar, seja uma folha de caderno, guardanapo, (rs), o importante é que exista evolução quanto ao processo do seu protótipo.\n\n### Alguns programas..\n\nExistem diversas ferramentas que servem para criarmos um protótipo, dentre eles estão:\n\n* [Proto.io](https://proto.io/)\n* [POP](https://popapp.in/)\n* [Pencil Project](http://pencil.evolus.vn/)\n* [Axure](http://www.axure.com/)\n\nExistem muitos outros, cabe a você testar qual mais lhe agrada, usar **Photoshop** ou até mesmo o **Paint** são opções, o que vale é criar algo bom, que seja útil e prático!\n\nBem, espero ter ajudado com o artigo, qualquer dúvida, criticas ou qualquer coisa a mais os comentarios estão livres pra tudo, um abraço e até a próxima!\n","source":"_posts/A-importancia-de-prototipar.md","raw":"---\ntitle: A importância de prototipar\ntags: ['project', 'prototype', 'organization']\ndate: 2015-04-10\ncomments: true\nmusic: \"TFK - Set me on fire\"\nmusicLink: \"https://open.spotify.com/track/6CHmPcd0X85BWVVFfHjYVI\"\ntimeRead: 4 minutos\n---\n\n<img src=\"/images/posts/pro.jpg\" alt=\"A importância de Prototipar\" title=\"A importância de Prototipar\">\n\nHá alguns meses, comecei a procurar arduamente processos que ajudam bastante no desenvolvimento e a organização de um projeto. Dentre vários, a prototipação foi uma delas, que visa de forma simples, ver um pouco do modelo antes de tudo...\n\n<!--more-->\n\n\n## O que é prototipar?\n\nNo geral, prototipar é quando desenhamos o modelo como desejamos criar a nossa aplicação, projeto, etc. O protótipo é como uma prévia do que vai ser a aplicacao no fim do desenvolvimento.\n\n### Okay! Mais porque tão importante?\n\nPrototipar nos auxilia em vários setores, tanto na maior organização do nosso projeto, mais também como serve de consulta para criarmos os códigos em si. Vamos a um exemplo, vamos supor que temos que criar uma página que vai conter nela dezenas de informações, e cada uma dessas informações devem estar em lugares diferentes na página, o desenvolvedor tendo uma visão gráfica de como vai ficar aquela informação ou o que quer que seja, vai ter mais facilidade em entender o layout, logo, terá mais facilidade de desenvolver.\n\n### O que é necessário para comecar a prototipar?\n\nÉ claro que não basta ter uma ideia na cabeça e começar a desenhar de qualquer forma, antes de tudo isso devemos ter conhecimento total sobre o projeto, qual o foco do mesmo, etc. Recolher as informações é um passo importantíssimo para criar um Prototipo de **QUALIDADE**.\n\n### Abstração de qualquer tecnologia\n\nEsse passo é extremamente importante para não entrar em processos que não fazem parte do processo de prototipação, se liberte de qualquer tecnologia/ferramenta para criar o mesmo, recolha as informações e vá aos poucos montando seu protótipo, se prender a tecnologias, definir quais ferramentas vão ser usadas logo de imediato vão fazer com que o projeto \"avance\" bastante, sem ao menos ter começado de fato!\n\n### Defina os lugares não tamanhos\n\nComo de fato será um desenho, delimitar tamanhos, larguras, entre outros é uma péssima pedida, já que o projeto pode sofrer algumas alterações e voce consequentemente deverá mudar algo que provavelmente demorou para criar. O aconselhável é criar uma estrutura que possa ser modificada caso venha ser preciso a alteração, invista na praticidade, é pra isso que serve os protótipos.\n\n### Converse com a equipe\n\nFazer reuniões com a equipe é essencial para que possamos criar algo que seja fácil de entender e compreender. Caso seja um projeto pessoal, caso use GitHub, ou qualquer outra ferramenta para Deploy, crie uma documentação para explicar o foco ou o desejo para o futuro projeto, para caso alguem deseje contribuir, ficar mais simples de entender e colaborar.\n\n\n### do rabisco ao gráfico\n\nNão importa o que você usará para iniciar, seja uma folha de caderno, guardanapo, (rs), o importante é que exista evolução quanto ao processo do seu protótipo.\n\n### Alguns programas..\n\nExistem diversas ferramentas que servem para criarmos um protótipo, dentre eles estão:\n\n* [Proto.io](https://proto.io/)\n* [POP](https://popapp.in/)\n* [Pencil Project](http://pencil.evolus.vn/)\n* [Axure](http://www.axure.com/)\n\nExistem muitos outros, cabe a você testar qual mais lhe agrada, usar **Photoshop** ou até mesmo o **Paint** são opções, o que vale é criar algo bom, que seja útil e prático!\n\nBem, espero ter ajudado com o artigo, qualquer dúvida, criticas ou qualquer coisa a mais os comentarios estão livres pra tudo, um abraço e até a próxima!\n","slug":"A-importancia-de-prototipar","published":1,"updated":"2016-02-05T14:48:27.000Z","layout":"post","photos":[],"link":"","_id":"cil5u7rzs0000x4w8fy62qnqd"},{"title":"Um pouco de Linux","date":"2015-02-26T03:00:00.000Z","comments":1,"music":"Artic Monkeys - Arabella","musicLink":"https://open.spotify.com/track/2LdG9xtEzCho3jCr58M6cq","timeRead":"4 minutos","_content":"\n<img src=\"/images/posts/elemos-post.jpg\" alt=\"Um pouco de Linux\" title=\"Um pouco de linux\">\n\nHá tempos queria escrever um pouco sobre Linux, sou fã do SO, a variedade e as opções são de encher os olhos, com isso, resolvi escrever um pouco sobre o dia a dia com o Linux...\n\n<!--more-->\n\nBem, como uma boa parte de quem usa sabe, o Linux não é super bem visto no mundo, muitos alegam dificuldade em usar, em instalar um programa, um driver, ou coisa do tipo. Essas causas sempre me deixaram com uma enorme dúvida de \"**Porque tanta gente diz que não presta, e existem apaixonados por ele e suas versões?**\". Isso me deixava angustiado e super curioso pra saber como era o tal do Bicho de Sete Cabeças que era o *LINUX*.\n\nMinha convivência com o SO não faz muito tempo, tenho pouco tempo de uso com Linux, apenas 2 anos, porém, é tempo suficiente para se apaixonar e mudar de conceito sobre o que é e como é ser um usuário Linux.\n\nHoje em dia eu mudei completamente a minha visão de usuário para com SO's, antigamente, como uma parte considerável da **TERRA** eu usava Windows. Para muitas das minhas tarefas como um usuário comum estava de bom tamanho, porém, com o passar do tempo criei coragem e resolvi enfretar de vez o mundo do pinguin. o/\n\n## Primeiras Impressões\n\nMuita gente diz que a primeira impressão é a que fica, o que mais me chamou a atenção na primeira vez que peguei em um Linux foi a variedade. A primeira distro que eu vi e experimentei foi o Ubuntu 12.04, a versão não estava original, e sim, bastante modificada,  o que inicialmente me chamou bastante a atenção, pois estava bonito e super rápido.\n\nLogo me veio a vontade de mexer pra saber até aonde eu poderia chegar com aquele sistema, porém claro, na época eu era um leigo e não sabia nem 0.1% do poder que o sistema tinha. Enfim, eu me encantei e dai então foi só alegria, rs. Claro que tive também diversas dores de cabeça a tentar instalar um programa, testar isso, criar aquilo, mais por fim, a experiência foi encantadora.\n\n\nDesde então fui migrando de distro em distro tanto para saber qual era a que mais combinava comigo e também para variar o conhecimento em relação as distro's. Durante mais ou menos nesses 2 anos, testei 7 delas.\n\nDentre elas estão em sequência: Ubuntu, Linux Mint, Open Suse, Debian, Pear Linux, Fedora GNOME/KDE, e agora a Elementary OS, dentre todas as citadas a que mais tempo passei foi o Fedora GNOME, quase que 8 meses com a distro, me fez criar um afeto enorme e também aprender várias coisas sobre a mesma.  De uns tempos pra cá,  deu uma vontade angustiante de mudar de distro,  e com isso pesquisei uma distro interssante, e com isso mudei para a Elementary OS.\n\n## O tal do Elementary OS \n\nPelo pouco tempo que eu tenho com a nova distro já da pra ver que é super rápida, influente e totalmente personalizável - tal como qualquer outra distro - recursos, temas, widget's, programas, fluidez, me fez logo de cara se apaixonar pela distro.  A distro é baseada no Ubuntu, o que torna mais simples de usar, possui um sistema de tweaks próprio que auxilia muito mais na personalização.\n\nAtualmente aposentei totalmente o Windows, usava-o somente para manipulações simples de imagens - *Photoshop* - só que dai resolvi migrar de vez para o Linux.\n\nClaro que as vezes precisamos de um recurso ali, outro aqui, mais nada que uma boa pesquisa não resolva, hoje não consigo mais viver sem Linux, me auxilia muito fortemente quando estou desenvolvendo, tanto pela praticidade, quanto pela facilidade de encontrar ferramentas, e pela quantidade de opções.\n\nOutra característica que me encanta no mundo Open Source, é a dedicação e a preucupação da comunidade em ajudar usuários que estão aprendendo, ou então ajudar em um problema, é interessante de ver e se torna gratificante e estimula a colaboração com a comunidade. Isso de certa forma se torna uma \"exclusividade\" para o Linux, não dizendo que entre os usuários de Mac ou de Windows não exista uma preucupação em ajudar ou coisa do tipo, porém, a participação dos usuários Linux para com a comunidade é visível e surpreende.\n\nÉ isso, o mundo Open Source é realmente lindo. E o melhor, é de graça. ♥ #VivaOLinux ♥\n","source":"_posts/um-pouco-de-linux.md","raw":"---\ntitle: Um pouco de Linux\ntags: ['linux', 'distro', 'lifestyle', 'OS']\ndate: 2015-02-26\ncomments: true\nmusic: \"Artic Monkeys - Arabella\"\nmusicLink: \"https://open.spotify.com/track/2LdG9xtEzCho3jCr58M6cq\"\ntimeRead: 4 minutos\n---\n\n<img src=\"/images/posts/elemos-post.jpg\" alt=\"Um pouco de Linux\" title=\"Um pouco de linux\">\n\nHá tempos queria escrever um pouco sobre Linux, sou fã do SO, a variedade e as opções são de encher os olhos, com isso, resolvi escrever um pouco sobre o dia a dia com o Linux...\n\n<!--more-->\n\nBem, como uma boa parte de quem usa sabe, o Linux não é super bem visto no mundo, muitos alegam dificuldade em usar, em instalar um programa, um driver, ou coisa do tipo. Essas causas sempre me deixaram com uma enorme dúvida de \"**Porque tanta gente diz que não presta, e existem apaixonados por ele e suas versões?**\". Isso me deixava angustiado e super curioso pra saber como era o tal do Bicho de Sete Cabeças que era o *LINUX*.\n\nMinha convivência com o SO não faz muito tempo, tenho pouco tempo de uso com Linux, apenas 2 anos, porém, é tempo suficiente para se apaixonar e mudar de conceito sobre o que é e como é ser um usuário Linux.\n\nHoje em dia eu mudei completamente a minha visão de usuário para com SO's, antigamente, como uma parte considerável da **TERRA** eu usava Windows. Para muitas das minhas tarefas como um usuário comum estava de bom tamanho, porém, com o passar do tempo criei coragem e resolvi enfretar de vez o mundo do pinguin. o/\n\n## Primeiras Impressões\n\nMuita gente diz que a primeira impressão é a que fica, o que mais me chamou a atenção na primeira vez que peguei em um Linux foi a variedade. A primeira distro que eu vi e experimentei foi o Ubuntu 12.04, a versão não estava original, e sim, bastante modificada,  o que inicialmente me chamou bastante a atenção, pois estava bonito e super rápido.\n\nLogo me veio a vontade de mexer pra saber até aonde eu poderia chegar com aquele sistema, porém claro, na época eu era um leigo e não sabia nem 0.1% do poder que o sistema tinha. Enfim, eu me encantei e dai então foi só alegria, rs. Claro que tive também diversas dores de cabeça a tentar instalar um programa, testar isso, criar aquilo, mais por fim, a experiência foi encantadora.\n\n\nDesde então fui migrando de distro em distro tanto para saber qual era a que mais combinava comigo e também para variar o conhecimento em relação as distro's. Durante mais ou menos nesses 2 anos, testei 7 delas.\n\nDentre elas estão em sequência: Ubuntu, Linux Mint, Open Suse, Debian, Pear Linux, Fedora GNOME/KDE, e agora a Elementary OS, dentre todas as citadas a que mais tempo passei foi o Fedora GNOME, quase que 8 meses com a distro, me fez criar um afeto enorme e também aprender várias coisas sobre a mesma.  De uns tempos pra cá,  deu uma vontade angustiante de mudar de distro,  e com isso pesquisei uma distro interssante, e com isso mudei para a Elementary OS.\n\n## O tal do Elementary OS \n\nPelo pouco tempo que eu tenho com a nova distro já da pra ver que é super rápida, influente e totalmente personalizável - tal como qualquer outra distro - recursos, temas, widget's, programas, fluidez, me fez logo de cara se apaixonar pela distro.  A distro é baseada no Ubuntu, o que torna mais simples de usar, possui um sistema de tweaks próprio que auxilia muito mais na personalização.\n\nAtualmente aposentei totalmente o Windows, usava-o somente para manipulações simples de imagens - *Photoshop* - só que dai resolvi migrar de vez para o Linux.\n\nClaro que as vezes precisamos de um recurso ali, outro aqui, mais nada que uma boa pesquisa não resolva, hoje não consigo mais viver sem Linux, me auxilia muito fortemente quando estou desenvolvendo, tanto pela praticidade, quanto pela facilidade de encontrar ferramentas, e pela quantidade de opções.\n\nOutra característica que me encanta no mundo Open Source, é a dedicação e a preucupação da comunidade em ajudar usuários que estão aprendendo, ou então ajudar em um problema, é interessante de ver e se torna gratificante e estimula a colaboração com a comunidade. Isso de certa forma se torna uma \"exclusividade\" para o Linux, não dizendo que entre os usuários de Mac ou de Windows não exista uma preucupação em ajudar ou coisa do tipo, porém, a participação dos usuários Linux para com a comunidade é visível e surpreende.\n\nÉ isso, o mundo Open Source é realmente lindo. E o melhor, é de graça. ♥ #VivaOLinux ♥\n","slug":"um-pouco-de-linux","published":1,"updated":"2016-02-05T14:48:27.000Z","layout":"post","photos":[],"link":"","_id":"cil5u7s190009x4w83alt4zkf"},{"title":"Como instalar Jekyll no Linux","date":"2015-03-02T03:00:00.000Z","comments":1,"music":"Capital Inicial - Depois da meia noite","musicLink":"https://open.spotify.com/track/6pu9S3CeFdo8z20Jw1mZgc","timeRead":"10 minutos","_content":"<img src=\"/images/posts/jekyll-post.jpg\" alt=\"Como instalar Jekyll no Linux\" title=\"Como instalar Jekyll no Linux\">\n\nAtualmente, quanto mais simples e funcional a ferramenta for, mais rapidamente ela será estudada e usada, Jekyll é um Static Page Generator criado em Ruby, super fácil de se utilizar e modificar...\n\n<!--more-->\n\n## O que é Jekyll?\n\nJekyll é um gerador de páginas estáticas criado em Ruby. Geradores de páginas estáticas são aquelas que não possuem um sistema por trás delas, um banco de dados por exemplo, páginas estaticas é uma boa pedida para caso queiramos criar sites simples, onde não temos a necessidade de ter uma interação forte com o usuário. Jekyll é uma boa pedida para caso queiramos criar um blog pessoal ou coisa do tipo, esse blog é um exemplo de site criado em Jekyll.\n\n## Ambiente de Instalação\n\n**Atenção:** É necessário ter Node.js instalado na máquina para executar as funções.\n\nBem, inicialmente para instalarmos Jekyll que é uma gem de Ruby, temos de primeiramente ter o Ruby instalado na nossa máquina. No caso do Linux, o Ruby já vem pré-instalado, para verificarmos a atual versão do Ruby que está instalada na máquina basta abrir o terminal e digitar `ruby -v`, onde o resultado será basicamente parecido com esse:\n\n``` bash\n        ruby 1.9.3p0 (2011-10-30 revision 33570) [x86_64-linux]\n```\n\nSegundo podemos ver, a versão do Ruby atual instalada é a **1.9.3**, é importante lembrar que para instalarmos o Jekyll é importante ter uma versão igual ou superior a **1.9.3**,  caso sua versão seja anterior a esta, atualize para evitar futuros possíveis erros de instalação de algumas GEM'S.\n\n### Instalando o Jekyll\n\nA partir de agora, vire best friend forever do seu terminal, pois é a partir dele que iremos instalar e utilizar as funções do Jekyll, e de qualquer outra Gem que você venha futuramente a utilizar.  Para instalar o Jekyll é simples basta ir no terminal e digitar o seguinte comando: `gem install jekyll`, caso precise de permissão execute `sudo gem install jekyll`, no segundo caso será requerida uma senha, insira a senha do usuário **root** e prossiga com a instalação.\n\n**Atenção:** Caso durante a instalação seja informado algum erro, tente executar o comando **sudo gem install jekyll --source http://rubygems.org** e instale.\n\nCaso a instalação seja concluída com sucesso, execute o comando `gem list`, que vai listar as gem's instaladas na máquina, feito isso verifique a versão atual das gem's instaladas. No meu caso ocorreu o seguinte:\n\n``` bash\n    ...\n    jekyll (2.5.3)\n    jekyll-coffeescript (1.0.1)\n    jekyll-gist (1.1.0)\n    ...\n```\n\nPronto, com isso já temos instalado o Jekyll na versão **2.5.3**, o exemplo segue o mesmo para instalar a maioria das gem's.\n\n## Mãos a Obra!\n\nBem, após tudo instalado corretamente, vamos criar uma interface 'pastel' do jekyll, basta executarmos 2 comandos para termos um exemplo simples de uma página.\nOs comandos são:\n\n* Jekyll new nome da pasta\n* jekyll server\n\nVamos lá, com o primeiro comando, o jekyll vai criar a **estrutura básica** de uma página, onde esse Nome_da_pasta vai ser a pasta onde a estrutura vai ser criada, nesse exemplo vou criar a estrutura em uma pasta que vou chamar de *teste*,vamos ao exemplo:\n\n``` bash\n    felipe@felipe-sousa:~/Documentos/projetos$  jekyll new teste\n    New jekyll site installed in /home/felipe/Documentos/projetos/teste.\n```\n\nA mensagem exibida diz que um novo site em jekyll foi criado no diretório **/home/felipe/Documentos/projetos/teste.**. Agora para vermos como está o exemplo criado localmente, basta acessar pelo terminal a pasta criada, para isso damos um `cd teste`, após isso basta executar o segundo comando `jekyll server`, com isso será exibida uma mensagem basicamente desta forma:\n\n``` bash\n    jekyll server\n    Configuration file: /home/felipe/Documentos/projetos/teste/_config.yml\n            Source: /home/felipe/Documentos/projetos/teste\n            Destination: /home/felipe/Documentos/projetos/teste/_site\n    Generating...\n                    done.\n\n            Configuration file: /home/felipe/Documentos/projetos/teste/_config.yml\n                    Server address: http://127.0.0.1:4000/\n                    Server running... press ctrl-c to stop.\n```\n\n Pronto! Para vermos o exemplo basta irmos no navegador e digitarmos **http://localhost:4000**.\n\n Resultado..\n\n {% img img-thumbnail /images/posts/jekyll-exampler.png %}\n\n\n Viu como é simples? Qualquer dúvida, crítica ou algum ponto importante que foi mal explicado ou que faltou no artigo, comenta que agradecerei muito! até a pŕoxima!\n","source":"_posts/como-instalar-jekyll-no-linux.md","raw":"---\ntitle: Como instalar Jekyll no Linux\ntags: ['Linux', 'static', 'generators', 'jekyll', 'pages']\ndate: 2015-03-02\ncomments: true\nmusic: \"Capital Inicial - Depois da meia noite\"\nmusicLink: \"https://open.spotify.com/track/6pu9S3CeFdo8z20Jw1mZgc\"\ntimeRead: 10 minutos\n---\n<img src=\"/images/posts/jekyll-post.jpg\" alt=\"Como instalar Jekyll no Linux\" title=\"Como instalar Jekyll no Linux\">\n\nAtualmente, quanto mais simples e funcional a ferramenta for, mais rapidamente ela será estudada e usada, Jekyll é um Static Page Generator criado em Ruby, super fácil de se utilizar e modificar...\n\n<!--more-->\n\n## O que é Jekyll?\n\nJekyll é um gerador de páginas estáticas criado em Ruby. Geradores de páginas estáticas são aquelas que não possuem um sistema por trás delas, um banco de dados por exemplo, páginas estaticas é uma boa pedida para caso queiramos criar sites simples, onde não temos a necessidade de ter uma interação forte com o usuário. Jekyll é uma boa pedida para caso queiramos criar um blog pessoal ou coisa do tipo, esse blog é um exemplo de site criado em Jekyll.\n\n## Ambiente de Instalação\n\n**Atenção:** É necessário ter Node.js instalado na máquina para executar as funções.\n\nBem, inicialmente para instalarmos Jekyll que é uma gem de Ruby, temos de primeiramente ter o Ruby instalado na nossa máquina. No caso do Linux, o Ruby já vem pré-instalado, para verificarmos a atual versão do Ruby que está instalada na máquina basta abrir o terminal e digitar `ruby -v`, onde o resultado será basicamente parecido com esse:\n\n``` bash\n        ruby 1.9.3p0 (2011-10-30 revision 33570) [x86_64-linux]\n```\n\nSegundo podemos ver, a versão do Ruby atual instalada é a **1.9.3**, é importante lembrar que para instalarmos o Jekyll é importante ter uma versão igual ou superior a **1.9.3**,  caso sua versão seja anterior a esta, atualize para evitar futuros possíveis erros de instalação de algumas GEM'S.\n\n### Instalando o Jekyll\n\nA partir de agora, vire best friend forever do seu terminal, pois é a partir dele que iremos instalar e utilizar as funções do Jekyll, e de qualquer outra Gem que você venha futuramente a utilizar.  Para instalar o Jekyll é simples basta ir no terminal e digitar o seguinte comando: `gem install jekyll`, caso precise de permissão execute `sudo gem install jekyll`, no segundo caso será requerida uma senha, insira a senha do usuário **root** e prossiga com a instalação.\n\n**Atenção:** Caso durante a instalação seja informado algum erro, tente executar o comando **sudo gem install jekyll --source http://rubygems.org** e instale.\n\nCaso a instalação seja concluída com sucesso, execute o comando `gem list`, que vai listar as gem's instaladas na máquina, feito isso verifique a versão atual das gem's instaladas. No meu caso ocorreu o seguinte:\n\n``` bash\n    ...\n    jekyll (2.5.3)\n    jekyll-coffeescript (1.0.1)\n    jekyll-gist (1.1.0)\n    ...\n```\n\nPronto, com isso já temos instalado o Jekyll na versão **2.5.3**, o exemplo segue o mesmo para instalar a maioria das gem's.\n\n## Mãos a Obra!\n\nBem, após tudo instalado corretamente, vamos criar uma interface 'pastel' do jekyll, basta executarmos 2 comandos para termos um exemplo simples de uma página.\nOs comandos são:\n\n* Jekyll new nome da pasta\n* jekyll server\n\nVamos lá, com o primeiro comando, o jekyll vai criar a **estrutura básica** de uma página, onde esse Nome_da_pasta vai ser a pasta onde a estrutura vai ser criada, nesse exemplo vou criar a estrutura em uma pasta que vou chamar de *teste*,vamos ao exemplo:\n\n``` bash\n    felipe@felipe-sousa:~/Documentos/projetos$  jekyll new teste\n    New jekyll site installed in /home/felipe/Documentos/projetos/teste.\n```\n\nA mensagem exibida diz que um novo site em jekyll foi criado no diretório **/home/felipe/Documentos/projetos/teste.**. Agora para vermos como está o exemplo criado localmente, basta acessar pelo terminal a pasta criada, para isso damos um `cd teste`, após isso basta executar o segundo comando `jekyll server`, com isso será exibida uma mensagem basicamente desta forma:\n\n``` bash\n    jekyll server\n    Configuration file: /home/felipe/Documentos/projetos/teste/_config.yml\n            Source: /home/felipe/Documentos/projetos/teste\n            Destination: /home/felipe/Documentos/projetos/teste/_site\n    Generating...\n                    done.\n\n            Configuration file: /home/felipe/Documentos/projetos/teste/_config.yml\n                    Server address: http://127.0.0.1:4000/\n                    Server running... press ctrl-c to stop.\n```\n\n Pronto! Para vermos o exemplo basta irmos no navegador e digitarmos **http://localhost:4000**.\n\n Resultado..\n\n {% img img-thumbnail /images/posts/jekyll-exampler.png %}\n\n\n Viu como é simples? Qualquer dúvida, crítica ou algum ponto importante que foi mal explicado ou que faltou no artigo, comenta que agradecerei muito! até a pŕoxima!\n","slug":"como-instalar-jekyll-no-linux","published":1,"updated":"2016-02-05T14:48:27.000Z","layout":"post","photos":[],"link":"","_id":"cil5u7s1h000ix4w8y4jjkinm"},{"title":"CoffeeScript - Nada é tão ruim quanto parece!","date":"2016-02-06T03:00:00.000Z","comments":1,"music":"","musicLink":"","timeRead":"","_content":"<img src=\"/images/posts/coffeescript-goodside.png\" alt=\"CoffeeScript - Nada é tão ruim quanto parece!\" title=\"CoffeeScript - Nada é tão ruim quanto parece!\">\nDurante muito tempo, escrever em JavaScript puro era pra mim uma perfeita combinação, sem o uso de pré-processadores ou coisas que me fizessem mudar a maneira de se escrever em JS nativo. Porém, de uns tempos pra cá, comecei a experimentar um cara chamado CoffeeScript, que é por muitos vistos com maus olhos...\n\n<!-- more -->\nSempre tive em minha cabeça que escrever em .js era a melhor escolha, claro, amamos a sintaxe nativa do JavaScript, mas temos de concordar que, se torna bastante verboso em alguns pontos, mas claro, varia de desenvolvedor pra desenvolvedor.\n\nEstou tendo a oportunidade em trabalhar usando Coffee como o compiler pra JavaScript. Antes de mais nada é interessante lembrarmos que, a principal proposta de um compilador, seja de CSS como Stylus, HTML como o Jade, ou de JavaScript como o CoffeeScript é principalmente facilitar o desenvolvimento, produtividade, etc, de um determinado grupo ou desenvolvedor. Seja implementando algumas particularidades para criar A ou não precisar utilizar regras de pontuação para fazer B e por ai vai.\n\nA questão é que, ouvi falar tanto sobre esse cara nos ultimos tempos, e por incrivel que pareça 99% dos comentários são apenas sobre coisas não tão boas, ou melhor dizendo, ridicularizando o compiler. Alguns utilizam do termo de ser 'limpo demais' e ficar subtendido algumas coisas, ou alegar que 'É muito Ruby pro meu gosto!' entre outros diversos comentários que mostram o desconhecimento sobre os benefícios que vem junto a ele.\n\nO foco CoffeeScript é compilar JavaScript, nada mais que isso, a linguagem não nasceu pra mudar a maneira de pensar - apesar de algumas coisas você precise se abstrair para entender mais perfeitamente - quando se escreve em Coffee já se sabe qual o resultado, simplesmente pelo fato de que ele apenas facilita sua vida pra você não ter que escrever tanto. Não espere que ele faça um cavalo com asas aparecer no seu código e simplifique tudo que existe ali. Sempre quando vamos usar algum pré-processador ou linguagem nova, temos de aprender como ela se comporta, suas especificades, o que precisa e o que não precisa e assim por diante, funciona assim com Sass, Jade, Less, ou qualquer outra coisa.\n\nPrimeiramente, antes de tudo e antes de usar qualquer compiler, temos que saber no mínimo escrever de forma nativa, aprender uma linguagem por meio de compiler com certeza não é uma boa escolha. Caso você não saiba, o resultado final, ou o que determinada linha faz, usar essas ferramentas não são uma boa pedida, aconselho escrever da forma nativa de ser, e com o tempo, escolher algo que lhe ajude.\n\n## Good - Limpo e direto!\n\nBem, pontos que por muito desenvolvedores são considerados como negativos, vejo como vantagem, a sua sintax *light*, agiliza bastante se tratando de escrita. Vejamos alguns exemplos:\n\nDeclarando variáveis: Sem necessidade de usar o `var`.\n``` coffeescript\n# coffee\na = 'coffeescript'\n\n# js\nvar a = 'javascript'\n```\n\nDeclarando funções: Sem parâmetros, sem `()` e `{}`.\n\n``` coffeescript\n# coffee\na = ->\n\n# js\nvar a = function(){}\n```\n\nFunções com parâmetros:\n``` coffeescript\n# coffee\na = (a, b) ->\n\n# js\nvar a = function(a , b){}\n```\n\nOlhando de uma forma em exemplos simples, pouco se muda, isso porque a ideia do CoffeeScript é simplesmente se abstrair da quantidade de pontuação em trechos simples, como por exemplo, `()`, `{}`, `;`, etc.  \n\n\n## Bad - O tal do `return`\n\nEm CoffeeScript a ultima linha sempre é considerada o `return`, vamos ao exemplo:\n``` coffeescript\n# coffee\na = (a, b) ->\n  c = a + b\n\n# js\nvar a = function(a, b) {\n  var c;\n  return c = a + b;\n};\n```\n\nComo a ùltima linha é o próprio `return`, nesse caso a função retorna `c = a + b;`, até ai muito lindo, legal.. Mas caso não queiramos retornar nada? Simples, basta adicionar na ultima linha um `return ` sem nada após ele, assim não sera retornado nada.\n\n``` coffeescript\n# coffee\na = (a, b) ->\n  c = a + b\n  return\n```\nPor mais óbvio que pareca, em alguns casos de erros, esquecer de declarar o return no fim de uma função, ou expressão, pode causar uma grande confusão, mas, basta atenção e nunca esquecer do carinha.\n\n## Bad - Cuidado com espaços em branco!\nOutro ponto do CoffeeScript que pode causar alguns problemas é que o em alguns casos podemos eliminar o uso dos `()` em determinados casos, vejamos o exemplo:\n\n``` coffeescript\n# js\nvar http = require('http');\n\n# coffee\nhttp = require 'http'\n```\nCoffeeScript trata como o que vem depois de um espaço em branco em alguns casos, como parâmetro do método ou função, e é o que acontece no exemplo anterior, ele considerou o `'http'` como parâmetro do `require`.\n\nSe olharmos pelo ponto de diminuir o uso de caracteres, se trata de vantagem ter isso em alguns pontos do código, o grande problema ocorre quando podemos usar isso em lugares que são mais propícios a erros, como por exemplo, chamar uma função que não possui parâmetros e depois adicionar logo em seguida, algo que não faça parte do escopo da função, ou simplesmente outro trecho de código, vejamos o exemplo:\n\n``` coffeescript\n# coffee\na = ->\nb = ->\n\na b\n\n# js\nvar a = function (){}\nvar b = function (){}\na(b)\n```\n\nEle considerou a função `b` como parâmetro da função `a`, que não recebe parâmetros na sua declaração, e isso, pode causar bastante dor de cabeça, por isso, atenção nos `\" \"`.\n\nResumindo, existem diversos outros pontos positivos e negativos ao se usar tanto o CoffeeScript, como qualquer outro compiler, cabe da experiência de usar e saber se vale ou não a pena o uso de um deles. Importante antes de tudo, experimentar para saber qual vai facilitar sua vida no dia a dia.\n\nPara saber mais sobre o CoffeeScript,  galera do [Loop Infinito](http://loopinfinito.com.br/) fez a vez uma versão da [documentação em português](http://coffeescript.loopinfinito.com.br/).\n\n\n#### Outros links:\n[CoffeeScript Equivalents In ES6](https://github.com/hemanth/coffeescript-equivalents-in-es6)\n[JS to Coffee](http://js2.coffee/)\n[Replace CoffeeScript with ES6](https://robots.thoughtbot.com/replace-coffeescript-with-es6)\n","source":"_posts/coffeescript-goodside.md","raw":"---\ntitle: CoffeeScript - Nada é tão ruim quanto parece!\ndate: 2016-02-06\ntags: ['coffeescript', 'project', 'frontend', 'languages']\ncomments: true\nmusic: \"\"\nmusicLink: \"\"\ntimeRead: \"\"\n---\n<img src=\"/images/posts/coffeescript-goodside.png\" alt=\"CoffeeScript - Nada é tão ruim quanto parece!\" title=\"CoffeeScript - Nada é tão ruim quanto parece!\">\nDurante muito tempo, escrever em JavaScript puro era pra mim uma perfeita combinação, sem o uso de pré-processadores ou coisas que me fizessem mudar a maneira de se escrever em JS nativo. Porém, de uns tempos pra cá, comecei a experimentar um cara chamado CoffeeScript, que é por muitos vistos com maus olhos...\n\n<!-- more -->\nSempre tive em minha cabeça que escrever em .js era a melhor escolha, claro, amamos a sintaxe nativa do JavaScript, mas temos de concordar que, se torna bastante verboso em alguns pontos, mas claro, varia de desenvolvedor pra desenvolvedor.\n\nEstou tendo a oportunidade em trabalhar usando Coffee como o compiler pra JavaScript. Antes de mais nada é interessante lembrarmos que, a principal proposta de um compilador, seja de CSS como Stylus, HTML como o Jade, ou de JavaScript como o CoffeeScript é principalmente facilitar o desenvolvimento, produtividade, etc, de um determinado grupo ou desenvolvedor. Seja implementando algumas particularidades para criar A ou não precisar utilizar regras de pontuação para fazer B e por ai vai.\n\nA questão é que, ouvi falar tanto sobre esse cara nos ultimos tempos, e por incrivel que pareça 99% dos comentários são apenas sobre coisas não tão boas, ou melhor dizendo, ridicularizando o compiler. Alguns utilizam do termo de ser 'limpo demais' e ficar subtendido algumas coisas, ou alegar que 'É muito Ruby pro meu gosto!' entre outros diversos comentários que mostram o desconhecimento sobre os benefícios que vem junto a ele.\n\nO foco CoffeeScript é compilar JavaScript, nada mais que isso, a linguagem não nasceu pra mudar a maneira de pensar - apesar de algumas coisas você precise se abstrair para entender mais perfeitamente - quando se escreve em Coffee já se sabe qual o resultado, simplesmente pelo fato de que ele apenas facilita sua vida pra você não ter que escrever tanto. Não espere que ele faça um cavalo com asas aparecer no seu código e simplifique tudo que existe ali. Sempre quando vamos usar algum pré-processador ou linguagem nova, temos de aprender como ela se comporta, suas especificades, o que precisa e o que não precisa e assim por diante, funciona assim com Sass, Jade, Less, ou qualquer outra coisa.\n\nPrimeiramente, antes de tudo e antes de usar qualquer compiler, temos que saber no mínimo escrever de forma nativa, aprender uma linguagem por meio de compiler com certeza não é uma boa escolha. Caso você não saiba, o resultado final, ou o que determinada linha faz, usar essas ferramentas não são uma boa pedida, aconselho escrever da forma nativa de ser, e com o tempo, escolher algo que lhe ajude.\n\n## Good - Limpo e direto!\n\nBem, pontos que por muito desenvolvedores são considerados como negativos, vejo como vantagem, a sua sintax *light*, agiliza bastante se tratando de escrita. Vejamos alguns exemplos:\n\nDeclarando variáveis: Sem necessidade de usar o `var`.\n``` coffeescript\n# coffee\na = 'coffeescript'\n\n# js\nvar a = 'javascript'\n```\n\nDeclarando funções: Sem parâmetros, sem `()` e `{}`.\n\n``` coffeescript\n# coffee\na = ->\n\n# js\nvar a = function(){}\n```\n\nFunções com parâmetros:\n``` coffeescript\n# coffee\na = (a, b) ->\n\n# js\nvar a = function(a , b){}\n```\n\nOlhando de uma forma em exemplos simples, pouco se muda, isso porque a ideia do CoffeeScript é simplesmente se abstrair da quantidade de pontuação em trechos simples, como por exemplo, `()`, `{}`, `;`, etc.  \n\n\n## Bad - O tal do `return`\n\nEm CoffeeScript a ultima linha sempre é considerada o `return`, vamos ao exemplo:\n``` coffeescript\n# coffee\na = (a, b) ->\n  c = a + b\n\n# js\nvar a = function(a, b) {\n  var c;\n  return c = a + b;\n};\n```\n\nComo a ùltima linha é o próprio `return`, nesse caso a função retorna `c = a + b;`, até ai muito lindo, legal.. Mas caso não queiramos retornar nada? Simples, basta adicionar na ultima linha um `return ` sem nada após ele, assim não sera retornado nada.\n\n``` coffeescript\n# coffee\na = (a, b) ->\n  c = a + b\n  return\n```\nPor mais óbvio que pareca, em alguns casos de erros, esquecer de declarar o return no fim de uma função, ou expressão, pode causar uma grande confusão, mas, basta atenção e nunca esquecer do carinha.\n\n## Bad - Cuidado com espaços em branco!\nOutro ponto do CoffeeScript que pode causar alguns problemas é que o em alguns casos podemos eliminar o uso dos `()` em determinados casos, vejamos o exemplo:\n\n``` coffeescript\n# js\nvar http = require('http');\n\n# coffee\nhttp = require 'http'\n```\nCoffeeScript trata como o que vem depois de um espaço em branco em alguns casos, como parâmetro do método ou função, e é o que acontece no exemplo anterior, ele considerou o `'http'` como parâmetro do `require`.\n\nSe olharmos pelo ponto de diminuir o uso de caracteres, se trata de vantagem ter isso em alguns pontos do código, o grande problema ocorre quando podemos usar isso em lugares que são mais propícios a erros, como por exemplo, chamar uma função que não possui parâmetros e depois adicionar logo em seguida, algo que não faça parte do escopo da função, ou simplesmente outro trecho de código, vejamos o exemplo:\n\n``` coffeescript\n# coffee\na = ->\nb = ->\n\na b\n\n# js\nvar a = function (){}\nvar b = function (){}\na(b)\n```\n\nEle considerou a função `b` como parâmetro da função `a`, que não recebe parâmetros na sua declaração, e isso, pode causar bastante dor de cabeça, por isso, atenção nos `\" \"`.\n\nResumindo, existem diversos outros pontos positivos e negativos ao se usar tanto o CoffeeScript, como qualquer outro compiler, cabe da experiência de usar e saber se vale ou não a pena o uso de um deles. Importante antes de tudo, experimentar para saber qual vai facilitar sua vida no dia a dia.\n\nPara saber mais sobre o CoffeeScript,  galera do [Loop Infinito](http://loopinfinito.com.br/) fez a vez uma versão da [documentação em português](http://coffeescript.loopinfinito.com.br/).\n\n\n#### Outros links:\n[CoffeeScript Equivalents In ES6](https://github.com/hemanth/coffeescript-equivalents-in-es6)\n[JS to Coffee](http://js2.coffee/)\n[Replace CoffeeScript with ES6](https://robots.thoughtbot.com/replace-coffeescript-with-es6)\n","slug":"coffeescript-goodside","published":1,"updated":"2016-02-07T18:57:24.000Z","layout":"post","photos":[],"link":"","_id":"cil5u7s1p000tx4w8wdg9w23d"},{"title":"Básico em Git - Parte 2","date":"2015-01-18T03:00:00.000Z","comments":1,"music":"Sublime - What I Got","musicLink":"https://open.spotify.com/track/3oVSsJXNADnYAnZWiEWFJH","timeRead":"7 minutos","_content":"\n<img src=\"/images/posts/git.jpg\" alt=\"Básico em Git - Parte 2\" title=\"Básico em Git - Parte 2\">\n\nBem, voltando com a segunda parte o artigo sobre GIT, vamos aprender sobre como verificar as mudanças realizadas nos arquivos, aprender como verificar os logs do projeto e como desfazer algumas ações.\n<!--more-->\n\nPrimeiramente vamos dar um recapitulada no post anterior, lá aprendemos a adicionar, commitar, e excluir arquivos do controle do GIT.\n\n### Verificar modificações com GIT\nAgora vamos aprender como verificar as diferenças de um arquivo que está para ser adicionado. Vamos usar o mesmo exemplo. Vamos supor que temos um arquivo em um repositório e o modificamos, quando damos um `git status`, para ver o status do projeto, aparece a seguinte mensagem.\n\n``` bash\nOn branch master\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n\tmodified:   teste.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n\nSegundo o GIT, ele nos informa que existem modificações no arquivo e que é preciso adicionar e commitar o mesmo. Mas, se quiséssemos ver as mudanças, como que faríamos? qual comando usariamos? A partir de agora, você vai aprender algo super importante sobre GIT, o GIT é dividido em 3 áreas principais, sendo era a **Working Directory**, **Stage Area** e **Git Directory**, o **Working Directory** é a sua parte de trabalho, arquivos nesse estágio estão pronto para serem adicionados, após adicioandos os arquivos vão para a segunda área, sendo ela a **Stage Area**, arquivos aqui, estão prontos para serem commitados, após commitados vão para o última área, a **Git Directory**, que são seus arquivos versionados e etc.\n\nPorque é importante aprender sobre essas áreas? Simples! Dependendo de cada área o comando pra verificar as modificações se altera. Vamos supor que eu tenho arquivos a serem *adicionados*, logo eles estão na área `Working Directory`, o comando para verificar as alterações no arquivo é o `git diff`, se aplicado no exemplo acima, ficaria desta forma.\n\n``` bash\n$ git diff\n\ndiff --git a/teste.txt b/teste.txt\nindex e69de29..8ca3766 100644\n--- a/teste.txt\n+++ b/teste.txt\n@@ -0,0 +1 @@\n\n+Exemplo de verificação.. :)\n\n\\ No newline at end of file\n```\n\nPara entender o que foi modificado, temos que entender os *simbolos*, o simbolo de `+`, significa as linhas que foram adicionados, já o de `-`, significa que determinada(s) linha(s), foram retiradas. Pronto, sabendo disso podemos deduzir que no arquivo `teste.txt`foi adicionado a linha *+Exemplo de verificação.. :)*.\n\nMais vamos supor que já tenhamos adicionado o(s) arquivos(s) e faltando apenas commitar, no caso estamos na **Stage Area**, o comando para verificar as modificações é `git diff --staged`. O mesmo vai ocorrer como no exemplo anterior.\n\nE vamos supor, acidentalmente você(acredite isso acontece muito!) adiciona arquivos que estavam na **Working Directory**, pra **Stage Area**, o que fazer? simples, o GIT nos oferece o comando `git reset HEAD arquivo.ext`, esse comando tira o(s) último(s) arquivo(s), que estavam na **Stage Area** e voltam para o **Working Directory**.\n\nVamos adicionar arquivos para a **Stage Area** veja o exemplo:\n\n``` bash\n$ git status\n\tOn branch master\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n\tmodified:   teste.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n\n//\n\n$ git add .\n//\n\n$ git status\n\nOn branch master\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n\tmodified:   teste.txt\n\n```\n\nPronto, arquivos estão na **Stage Area**, vamos adicionar o comando `git reset HEAD .`, para voltarmos ao **Working Directory** :\n\n``` bash\n$ git reset HEAD .\n\nUnstaged changes after reset:\nM\tteste.txt\n\n// Após feito isso vamos dar um git status.\n\n$ git status\n\nOn branch master\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n\tmodified:   teste.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n\nPronto, os arquivos voltaram para o nivel inicial.\n\n\n\n\n### Log's com GIT\n\nLogs em GIT são marcados a partir dos seus commits, existem algumas forma de verificar os logs do seu projeto, o comando `git log` mostra de uma forma bem simples os seus commits, com a data, o autor e o nome do commit. Vamos executar o comando e ver o exemplo:\n\n``` bash\n$ git log\n\ncommit f448501027e2693af63e892a9bbb371a4ed55745\nAuthor: Felipe Sousa <felipzbr@gmail.com>\nDate:   Sun Jan 18 11:39:22 2015 -0300\n\n    initial commit\n```\n\nNo meu caso, esse repositório nao possui muitos commits, então o seu *log* foi bem pequeno, mostrando apenas 1 commit.\n\nMais vamos supor que você está em um projeto gigante com varios meses de trabalho, verificar o log, olhando commit por commit se torna cansativo e estressante. Para esse ocasião o GIT tem o comando, `git log --pretty=oneline`, esse comando vai apenas mostrar os nomes do commits um por um em linha, veja o exemplo:\n\n``` bash\n$ git log --pretty=oneline\n\nf448501027e2693af63e892a9bbb371a4ed55745 initial commit\n```\nComo visto, ele mostrou os meus commits em linha, como apenas exite 1 commit, ele o listou somente.\n\nPronto, simples e fácil verificar o log do seu projeto com GIT.\n\nPor hora é só, nesse parte do artigo aprendemos como ver as  modificações de arquivos, aprendemos sobre os estágios do GIT e aprendemos a verificar os logs do projeto. Obrigado e até a proxima!\n","source":"_posts/basico-em-git-parte2.md","raw":"---\ntitle: Básico em Git - Parte 2\ntags: ['control', 'versionamento', 'git']\ndate: 2015-01-18\ncomments: true\nmusic: \"Sublime - What I Got\"\nmusicLink: \"https://open.spotify.com/track/3oVSsJXNADnYAnZWiEWFJH\"\ntimeRead: 7 minutos\n---\n\n<img src=\"/images/posts/git.jpg\" alt=\"Básico em Git - Parte 2\" title=\"Básico em Git - Parte 2\">\n\nBem, voltando com a segunda parte o artigo sobre GIT, vamos aprender sobre como verificar as mudanças realizadas nos arquivos, aprender como verificar os logs do projeto e como desfazer algumas ações.\n<!--more-->\n\nPrimeiramente vamos dar um recapitulada no post anterior, lá aprendemos a adicionar, commitar, e excluir arquivos do controle do GIT.\n\n### Verificar modificações com GIT\nAgora vamos aprender como verificar as diferenças de um arquivo que está para ser adicionado. Vamos usar o mesmo exemplo. Vamos supor que temos um arquivo em um repositório e o modificamos, quando damos um `git status`, para ver o status do projeto, aparece a seguinte mensagem.\n\n``` bash\nOn branch master\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n\tmodified:   teste.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n\nSegundo o GIT, ele nos informa que existem modificações no arquivo e que é preciso adicionar e commitar o mesmo. Mas, se quiséssemos ver as mudanças, como que faríamos? qual comando usariamos? A partir de agora, você vai aprender algo super importante sobre GIT, o GIT é dividido em 3 áreas principais, sendo era a **Working Directory**, **Stage Area** e **Git Directory**, o **Working Directory** é a sua parte de trabalho, arquivos nesse estágio estão pronto para serem adicionados, após adicioandos os arquivos vão para a segunda área, sendo ela a **Stage Area**, arquivos aqui, estão prontos para serem commitados, após commitados vão para o última área, a **Git Directory**, que são seus arquivos versionados e etc.\n\nPorque é importante aprender sobre essas áreas? Simples! Dependendo de cada área o comando pra verificar as modificações se altera. Vamos supor que eu tenho arquivos a serem *adicionados*, logo eles estão na área `Working Directory`, o comando para verificar as alterações no arquivo é o `git diff`, se aplicado no exemplo acima, ficaria desta forma.\n\n``` bash\n$ git diff\n\ndiff --git a/teste.txt b/teste.txt\nindex e69de29..8ca3766 100644\n--- a/teste.txt\n+++ b/teste.txt\n@@ -0,0 +1 @@\n\n+Exemplo de verificação.. :)\n\n\\ No newline at end of file\n```\n\nPara entender o que foi modificado, temos que entender os *simbolos*, o simbolo de `+`, significa as linhas que foram adicionados, já o de `-`, significa que determinada(s) linha(s), foram retiradas. Pronto, sabendo disso podemos deduzir que no arquivo `teste.txt`foi adicionado a linha *+Exemplo de verificação.. :)*.\n\nMais vamos supor que já tenhamos adicionado o(s) arquivos(s) e faltando apenas commitar, no caso estamos na **Stage Area**, o comando para verificar as modificações é `git diff --staged`. O mesmo vai ocorrer como no exemplo anterior.\n\nE vamos supor, acidentalmente você(acredite isso acontece muito!) adiciona arquivos que estavam na **Working Directory**, pra **Stage Area**, o que fazer? simples, o GIT nos oferece o comando `git reset HEAD arquivo.ext`, esse comando tira o(s) último(s) arquivo(s), que estavam na **Stage Area** e voltam para o **Working Directory**.\n\nVamos adicionar arquivos para a **Stage Area** veja o exemplo:\n\n``` bash\n$ git status\n\tOn branch master\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n\tmodified:   teste.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n\n//\n\n$ git add .\n//\n\n$ git status\n\nOn branch master\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n\tmodified:   teste.txt\n\n```\n\nPronto, arquivos estão na **Stage Area**, vamos adicionar o comando `git reset HEAD .`, para voltarmos ao **Working Directory** :\n\n``` bash\n$ git reset HEAD .\n\nUnstaged changes after reset:\nM\tteste.txt\n\n// Após feito isso vamos dar um git status.\n\n$ git status\n\nOn branch master\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n\tmodified:   teste.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n\nPronto, os arquivos voltaram para o nivel inicial.\n\n\n\n\n### Log's com GIT\n\nLogs em GIT são marcados a partir dos seus commits, existem algumas forma de verificar os logs do seu projeto, o comando `git log` mostra de uma forma bem simples os seus commits, com a data, o autor e o nome do commit. Vamos executar o comando e ver o exemplo:\n\n``` bash\n$ git log\n\ncommit f448501027e2693af63e892a9bbb371a4ed55745\nAuthor: Felipe Sousa <felipzbr@gmail.com>\nDate:   Sun Jan 18 11:39:22 2015 -0300\n\n    initial commit\n```\n\nNo meu caso, esse repositório nao possui muitos commits, então o seu *log* foi bem pequeno, mostrando apenas 1 commit.\n\nMais vamos supor que você está em um projeto gigante com varios meses de trabalho, verificar o log, olhando commit por commit se torna cansativo e estressante. Para esse ocasião o GIT tem o comando, `git log --pretty=oneline`, esse comando vai apenas mostrar os nomes do commits um por um em linha, veja o exemplo:\n\n``` bash\n$ git log --pretty=oneline\n\nf448501027e2693af63e892a9bbb371a4ed55745 initial commit\n```\nComo visto, ele mostrou os meus commits em linha, como apenas exite 1 commit, ele o listou somente.\n\nPronto, simples e fácil verificar o log do seu projeto com GIT.\n\nPor hora é só, nesse parte do artigo aprendemos como ver as  modificações de arquivos, aprendemos sobre os estágios do GIT e aprendemos a verificar os logs do projeto. Obrigado e até a proxima!\n","slug":"basico-em-git-parte2","published":1,"updated":"2016-02-05T14:48:27.000Z","layout":"post","photos":[],"link":"","_id":"cil5u7s1w0011x4w8m6uptp36"},{"title":"Básico em Git - Parte 1","date":"2015-01-17T03:00:00.000Z","comments":1,"music":"Sublime - Santeria","musicLink":"https://open.spotify.com/track/2Z2vOukzwOgqR4dkymRSWd","timeRead":"6 minutos","_content":"\n<img src=\"/images/posts/git.jpg\" alt=\"Básico em Git - Parte 1\" title=\"Básico em Git - Parte 1\">\n\nBem, visto que é super importante o uso de Controle de Versões em projetos para organizá-lo de forma mais correta, ver a evolução do projeto com o tempo, etc.\n<!--more-->\n Resolvi falar um pouco sobre GIT, um dos Sistemas de Controle de Versão que vem se destacando pela sua facilidade e eficiência em vários ambientes, seja trabalhando individualmente ou em grupo, GIT sempre auxilia da forma mais simples, ajudando no processo, organização e progresso do projeto.\n\nO artigo vai ser dividido em partes. A primeira sendo como configurar, iniciar, adicionar arquivos, commitar e como excluir arquivos com GIT em um projeto individual.\n\n{% blockquote %}\nGit é um sistema de controle de versão distribuído e um sistema de gerenciamento de código fonte, com ênfase em velocidade. O Git foi inicialmente projetado e desenvolvido por Linus Torvalds para o desenvolvimento do kernel Linux, mas foi adotado por muitos outros projetos.\n{% endblockquote %} \n\n### Instalar GIT\n\nAntes de começar, é necessário instalar o GIT na sua máquina, [você pode baixar clicando aqui](http://git-scm.com/downloads), após o download realize a instalação, após isso já estamos com tudo pronto para iniciar com Git.\n\n### Começando com o GIT\n\nDependendo do seu SO, o GIT pode ser encontrado no caso de Linux e MAC no própio terminal de ambos, bastando executar os comandos a partir do mesmo, já no Windows, vem um programa que simula um terminal, e será por ele que você pode iniciar os comandos. Estou usando Linux, no meu caso, os comandos serão executados a partir do meu terminal.\n\n**A partir de agora todos os exemplos serão executados no terminal.**\n\nPrimeiro temos que realizar 2 configurações básicas no GIT. Insira no seu terminal *ou programa* o seguinte comando.\n\n`$ git config --global user.name \"your_username\"`, onde `your_username`, você deve substituir pelo seu nome. Depois de ter configurado seu nome, adicione o comando `$ git config --global user.email youremail@example.com`, e edite o `youremail@example.com` pelo seu email, após feito isso, podemos começar de vez a versionar nossos projetos, *uffa*.\n\nVamos supor que eu vou começar o projeto no caminho `Documentos/teste/` que quero começar a controlar as versões dele, para isso, basta executar o comando `git init` dentro do diretório.\n\n> git init - iniciar o versionamento pelo git.\n\nEsse comando vai criar uma pasta `.git` no seu diretório.\n\n``` bash\nInitialized empty Git repository in /Documentos/teste/.git/\n\n```\n\nApós isso vamos dar um `git status`, esse comando vai ver status do seu projeto, e vai dizer se precisa executar outro comando. Vamos supor que sua projeto está vazio, quando executamos o `git status` a mensagem [que aparece é a seguinte.\n\n``` bash\nOn branch master\n\nInitial commit\n\nnothing to commit (create/copy files and use \"git add\" to track)\n```\n\nEssa mensagem mostra que ainda não é necessário executar mais nem um comando, é como que seu repositório estivesse correto, ou nada de errado.\n\nAgora vamos adicionar o arquivos `teste.txt` na pasta e vamos dar novamente um `git status`. Confira o que apareceu.\n\n``` bash\nOn branch master\n\nInitial commit\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n        teste.txt\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n\n```\n\nCom essa mensagem o GIT informou que existem arquivos que precisam ser adicionados no sistema paa serem versionados. Para adicionar arquivos para serem versionado podemos usar algumas maneiras. Usando o comando `git add arquivo.ext`, podemos adicionar somente o arquivo em sí. Mais vamos supor que queiramos adicionar 10 arquivos.txt de uma vez, ficar digitando o nome e o tipo do arquivo pode se tornar cansativo. para isso podemos adicionar o comando `git add '*.txt'`, com isso ele vai adicionar todos os arquivos .txt, outra maneira *e mais prática* para adicionar os arquivos é usando o comando `git add .`, com isso ele vai adicionar todos os arquivos de todas as extensões que estão pendentes.\n\nNo exemplo vamos usar o comando `git add .`, após isso vamos novamente dar um `git status` e vejamos o que acontece.\n\n``` bash\nOn branch master\nInitial commit\n\tChanges to be committed:\n  (use \"git rm --cached <file>...\" to unstage)\n\t        new file:   teste.txt\n\n```\n\nCom a mensagem o GIT nos informou que existem arquivos a serem *commitados*, commitar arquivo(s) nada mais é do que comentar o que foi mudado ou o que foi adicionado naquele(s) arquivo(s). Para commitar é muito simples, basta adicionar `git commit -m \"Descrição\"`, onde o que está entre *aspas* será o que vamos descrever com a alteração. Veja o exemplo:\n\n``` bash\n[master (root-commit) 194a281] adicionando o arquivo teste.txt\n 1 file changed, 1 insertion(+)\n create mode 100644 teste.txt\n```\n\nA mensagem mostra que o arquivo foi commitado com sucesso! Pronto, agora já sabemos como adicionar arquivos e comenta-los.\n\nE se por acaso você queira apagar algum arquivo para que ele não exista mais no meu projeto? Simples! Basta executar o comando `git rm arquivo.ext`, com isso ele vai apagar o arquivo dos seu projeto.\n\nBem, com esse artigo inicial aprendemos o básico de Git, tais como, como configurar o ambiente, como iniciar um respositório para que ele possa começar a ser versionado, adicionar arquivos, commitar arquivos e deletá-los. Até a próxima! :)\n","source":"_posts/basico-em-git-parte1.md","raw":"---\ntitle: Básico em Git - Parte 1\ntags: ['control', 'versionamento', 'git']\ndate: 2015-01-17\ncomments: true\nmusic: \"Sublime - Santeria\"\nmusicLink: 'https://open.spotify.com/track/2Z2vOukzwOgqR4dkymRSWd'\ntimeRead: 6 minutos\n---\n\n<img src=\"/images/posts/git.jpg\" alt=\"Básico em Git - Parte 1\" title=\"Básico em Git - Parte 1\">\n\nBem, visto que é super importante o uso de Controle de Versões em projetos para organizá-lo de forma mais correta, ver a evolução do projeto com o tempo, etc.\n<!--more-->\n Resolvi falar um pouco sobre GIT, um dos Sistemas de Controle de Versão que vem se destacando pela sua facilidade e eficiência em vários ambientes, seja trabalhando individualmente ou em grupo, GIT sempre auxilia da forma mais simples, ajudando no processo, organização e progresso do projeto.\n\nO artigo vai ser dividido em partes. A primeira sendo como configurar, iniciar, adicionar arquivos, commitar e como excluir arquivos com GIT em um projeto individual.\n\n{% blockquote %}\nGit é um sistema de controle de versão distribuído e um sistema de gerenciamento de código fonte, com ênfase em velocidade. O Git foi inicialmente projetado e desenvolvido por Linus Torvalds para o desenvolvimento do kernel Linux, mas foi adotado por muitos outros projetos.\n{% endblockquote %} \n\n### Instalar GIT\n\nAntes de começar, é necessário instalar o GIT na sua máquina, [você pode baixar clicando aqui](http://git-scm.com/downloads), após o download realize a instalação, após isso já estamos com tudo pronto para iniciar com Git.\n\n### Começando com o GIT\n\nDependendo do seu SO, o GIT pode ser encontrado no caso de Linux e MAC no própio terminal de ambos, bastando executar os comandos a partir do mesmo, já no Windows, vem um programa que simula um terminal, e será por ele que você pode iniciar os comandos. Estou usando Linux, no meu caso, os comandos serão executados a partir do meu terminal.\n\n**A partir de agora todos os exemplos serão executados no terminal.**\n\nPrimeiro temos que realizar 2 configurações básicas no GIT. Insira no seu terminal *ou programa* o seguinte comando.\n\n`$ git config --global user.name \"your_username\"`, onde `your_username`, você deve substituir pelo seu nome. Depois de ter configurado seu nome, adicione o comando `$ git config --global user.email youremail@example.com`, e edite o `youremail@example.com` pelo seu email, após feito isso, podemos começar de vez a versionar nossos projetos, *uffa*.\n\nVamos supor que eu vou começar o projeto no caminho `Documentos/teste/` que quero começar a controlar as versões dele, para isso, basta executar o comando `git init` dentro do diretório.\n\n> git init - iniciar o versionamento pelo git.\n\nEsse comando vai criar uma pasta `.git` no seu diretório.\n\n``` bash\nInitialized empty Git repository in /Documentos/teste/.git/\n\n```\n\nApós isso vamos dar um `git status`, esse comando vai ver status do seu projeto, e vai dizer se precisa executar outro comando. Vamos supor que sua projeto está vazio, quando executamos o `git status` a mensagem [que aparece é a seguinte.\n\n``` bash\nOn branch master\n\nInitial commit\n\nnothing to commit (create/copy files and use \"git add\" to track)\n```\n\nEssa mensagem mostra que ainda não é necessário executar mais nem um comando, é como que seu repositório estivesse correto, ou nada de errado.\n\nAgora vamos adicionar o arquivos `teste.txt` na pasta e vamos dar novamente um `git status`. Confira o que apareceu.\n\n``` bash\nOn branch master\n\nInitial commit\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n        teste.txt\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n\n```\n\nCom essa mensagem o GIT informou que existem arquivos que precisam ser adicionados no sistema paa serem versionados. Para adicionar arquivos para serem versionado podemos usar algumas maneiras. Usando o comando `git add arquivo.ext`, podemos adicionar somente o arquivo em sí. Mais vamos supor que queiramos adicionar 10 arquivos.txt de uma vez, ficar digitando o nome e o tipo do arquivo pode se tornar cansativo. para isso podemos adicionar o comando `git add '*.txt'`, com isso ele vai adicionar todos os arquivos .txt, outra maneira *e mais prática* para adicionar os arquivos é usando o comando `git add .`, com isso ele vai adicionar todos os arquivos de todas as extensões que estão pendentes.\n\nNo exemplo vamos usar o comando `git add .`, após isso vamos novamente dar um `git status` e vejamos o que acontece.\n\n``` bash\nOn branch master\nInitial commit\n\tChanges to be committed:\n  (use \"git rm --cached <file>...\" to unstage)\n\t        new file:   teste.txt\n\n```\n\nCom a mensagem o GIT nos informou que existem arquivos a serem *commitados*, commitar arquivo(s) nada mais é do que comentar o que foi mudado ou o que foi adicionado naquele(s) arquivo(s). Para commitar é muito simples, basta adicionar `git commit -m \"Descrição\"`, onde o que está entre *aspas* será o que vamos descrever com a alteração. Veja o exemplo:\n\n``` bash\n[master (root-commit) 194a281] adicionando o arquivo teste.txt\n 1 file changed, 1 insertion(+)\n create mode 100644 teste.txt\n```\n\nA mensagem mostra que o arquivo foi commitado com sucesso! Pronto, agora já sabemos como adicionar arquivos e comenta-los.\n\nE se por acaso você queira apagar algum arquivo para que ele não exista mais no meu projeto? Simples! Basta executar o comando `git rm arquivo.ext`, com isso ele vai apagar o arquivo dos seu projeto.\n\nBem, com esse artigo inicial aprendemos o básico de Git, tais como, como configurar o ambiente, como iniciar um respositório para que ele possa começar a ser versionado, adicionar arquivos, commitar arquivos e deletá-los. Até a próxima! :)\n","slug":"basico-em-git-parte1","published":1,"updated":"2016-02-05T14:48:27.000Z","layout":"post","photos":[],"link":"","_id":"cil5u7s260018x4w8b8l3pemo"},{"title":"MongoDB - Baby Steps","date":"2015-07-24T03:05:56.000Z","comments":1,"music":"Green Day - Brain Stew","musicLink":"https://open.spotify.com/track/1nLnpLXvl68RZCSjfkyiaa","timeRead":"10 minutos","_content":"<img src=\"/images/posts/mongodb.jpg\" style=\" height:200px ;\" alt=\"MongoDB - Baby Steps\" title=\"MongoDB - Baby Steps\">\n\nMongoDB é uma aplicação de open source, de alta performance, orientado a documentos. Foi escrito em C++. Muitas aplicações podem, dessa forma, modelar informações de modo muito mais natural, pois os dados podem ser aninhados em hierarquias complexas e continuar a ser indexáveis e fáceis de buscar.\n\n<!--more-->\nEste será um ~~guia~~ que visa apenas listar alguns comandos simples, sem muitas apresentações, apenas sobre algumas partes funcionais da ferramenta. Informações sobre a filosofia e outras coisinhas, [visite a documentação oficial.](http://docs.mongodb.org/)\n\n* Iniciar MongoDB.\n\n```bash\nmongo\n```\n##### Todos os comandos a seguir serão executados após termos iniciado o MongoDB.\n\n\n* Listar base de dados existentes no banco.\n\n```bash\nshow dbs\n```\n\n* Criar uma base de dados.\n\n```bash\nuse NomeDoBanco\n```\n\n* Verificar em qual base de dados estamos atualmente.\n\n```bash\ndb\n```\n\n### Collections\n\nCollection é como uma estrutura de dados é chamada em MongoDB.\n\n* Criar um collection.\n\n```bash\ndb.createCollection(name, options);\n```\n\nNa criação da collection utilizamos o comando acima com dois parâmetros, o `nome` e as opções, sendo essas configurações de tamanho(em bytes) da collection, quantos documentos são permitidos, enfim, por padrão apenas o valor do `nome` é necessária, o segundo parâmetro é opcional, [leia mais sobre collections aqui.](http://docs.mongodb.org/manual/reference/method/db.createCollection/)\n\n*exemplo da criação de uma collection \"pessoas\"*:\n\n```bash\ndb.createCollection('pessoas')\n```\n\n* Listar as collections na base de dados atuais:\n\n```bash\nshow collections\n```\n\n### Inserir Dados\n\nPronto, passos simples de como realizamos a criação e listagem de collections. Vamos agora ver como adicionamos dados as essas collections.\n\nUm ponto importante a citar é que, o mongoDB utiliza arquivos em formatos JSON's para armazenar seus dados. Sabendo disso, para adicionarmos informações em nossas collections basta escrever no formato de arquivos *.json*. Leia um pouco sobre padrões de json [aqui.](http://jsonapi.org/)\n\n* Inserir dados em uma collection:\n\n```bash\ndb.nomeDaCollection.insert();\n```\n\nCom o comando acima, podemos adicionar arquivos, veja um exemplo de como podemos adicionar dados em uma collection através do método .insert():\n\n```bash\ndb.pessoas.insert({nome: \"felipe\", idade: 17, sexo: \"masculino\"});\n```\n\nComo visto o exemplo acima, usamos o padrão de escrita de arquivos json para inserir dados.\n\n### Consulta de dados\n\nPara consultarmos uma collection e observar os dados que existem nela de 2 formas:\n\n```bash\ndb.nomeDaCollection.find();\n```\nou\n\n```bash\ndb.nomeDaCollection.find().pretty();\n```\n\nA diferença é simples! Na primeira opção temos como output os dados jogados sem nenhuma organização, na segunda, com o implemento do método `.pretty()` os dados são mostrados de uma forma muito mais agradável e legível. Exemplo:\n\n```bash\ndb.pessoas.find().pretty();\n\n//output\n\n{\n\t\"_id\" : ObjectId(\"55b190caf8ab876af97e521b\"),\n\t\"nome\" : \"felipe\",\n\t\"idade\" : 17,\n\t\"sexo\" : \"Masculino\"\n}\n\n```\n### Update de Dados\n\nNo mongoDB, o método `update()` serve como método de atualização de algum dado, como também de criação daquele campo caso não exista o campo.\n\n```bash\ndb.nomeDaCollection.update(query, modificador, callback);\n```\n\nO método `update()` recebe três parâmetros, sendo eles `query`, que vai ser **ONDE** nós vamos alterar os dados, `modificador`, que vai ser **PELO QUE** aquele dado vai ser alterado, e um callback. Vejamos um exemplo:\n\n```bash\ndb.pessoas.update({name: \"felipe\"}, { $set:{idade: 20} });\n```\n\nNesse exemplo, estamos dizendo que estamos alterando o valor do campo idade onde o `name` do dado for \"felipe\".\n\n*Observe que no 2º parametro utilizamos o `$set` para descrevermos que apenas aquela chave de **campo: valor** vai ser alterada quando executarmos o método, caso o `$set` não seja incluído, todos os campos de todos os dados vão ser substituidos.*\n\n### Remover Dados\n\nPara removermos dados de uma collection utilizamos o comando:\n\n```bash\ndb.nomeDaCollection.remove();\n```\n\nComo parâmetro do método `.remove()` passsamos o dado que queremos alterar. Veja o exemplo:\n\n```bash\ndb.pessoas.remove({name: \"felipe\"});\n```\n\nCom isso, acabo de remover todos os dados do usuário que possui o `name` como \"felipe\";\n\n*Para removermos todos os dados da collection basta passar como parâmetro `{}` no método `.remove()`.*\n\n### Deletar Collections e Base de dados\n\nPara deletar um collection usamos o comando:\n\n```bash\ndb.nomeDaCollection.drop();\n```\n\n*lembrando que o mongo não pede confirmação para deletar os dados, então avalie corretamente se a collection selecionada é a que você quer apagar.*\n\nPara deletar uma base de dados, usamos o comando:\n\n```bash\ndb.dropDatabase();\n```\n\nCom isso temos o básico em MongoDB. Existem muito mais coisas a se aprender sobre essa ferramenta fantástica. [Leia mais na documentação oficial](http://docs.mongodb.org/).\n","source":"_posts/Um-pouco-de-MongoDB.md","raw":"---\ntitle: MongoDB - Baby Steps\ndate: 2015-07-24 00:05:56\ntags: ['MongoDB','NoSQL']\ncomments: true\nmusic: \"Green Day - Brain Stew\"\nmusicLink: \"https://open.spotify.com/track/1nLnpLXvl68RZCSjfkyiaa\"\ntimeRead: 10 minutos\n---\n<img src=\"/images/posts/mongodb.jpg\" style=\" height:200px ;\" alt=\"MongoDB - Baby Steps\" title=\"MongoDB - Baby Steps\">\n\nMongoDB é uma aplicação de open source, de alta performance, orientado a documentos. Foi escrito em C++. Muitas aplicações podem, dessa forma, modelar informações de modo muito mais natural, pois os dados podem ser aninhados em hierarquias complexas e continuar a ser indexáveis e fáceis de buscar.\n\n<!--more-->\nEste será um ~~guia~~ que visa apenas listar alguns comandos simples, sem muitas apresentações, apenas sobre algumas partes funcionais da ferramenta. Informações sobre a filosofia e outras coisinhas, [visite a documentação oficial.](http://docs.mongodb.org/)\n\n* Iniciar MongoDB.\n\n```bash\nmongo\n```\n##### Todos os comandos a seguir serão executados após termos iniciado o MongoDB.\n\n\n* Listar base de dados existentes no banco.\n\n```bash\nshow dbs\n```\n\n* Criar uma base de dados.\n\n```bash\nuse NomeDoBanco\n```\n\n* Verificar em qual base de dados estamos atualmente.\n\n```bash\ndb\n```\n\n### Collections\n\nCollection é como uma estrutura de dados é chamada em MongoDB.\n\n* Criar um collection.\n\n```bash\ndb.createCollection(name, options);\n```\n\nNa criação da collection utilizamos o comando acima com dois parâmetros, o `nome` e as opções, sendo essas configurações de tamanho(em bytes) da collection, quantos documentos são permitidos, enfim, por padrão apenas o valor do `nome` é necessária, o segundo parâmetro é opcional, [leia mais sobre collections aqui.](http://docs.mongodb.org/manual/reference/method/db.createCollection/)\n\n*exemplo da criação de uma collection \"pessoas\"*:\n\n```bash\ndb.createCollection('pessoas')\n```\n\n* Listar as collections na base de dados atuais:\n\n```bash\nshow collections\n```\n\n### Inserir Dados\n\nPronto, passos simples de como realizamos a criação e listagem de collections. Vamos agora ver como adicionamos dados as essas collections.\n\nUm ponto importante a citar é que, o mongoDB utiliza arquivos em formatos JSON's para armazenar seus dados. Sabendo disso, para adicionarmos informações em nossas collections basta escrever no formato de arquivos *.json*. Leia um pouco sobre padrões de json [aqui.](http://jsonapi.org/)\n\n* Inserir dados em uma collection:\n\n```bash\ndb.nomeDaCollection.insert();\n```\n\nCom o comando acima, podemos adicionar arquivos, veja um exemplo de como podemos adicionar dados em uma collection através do método .insert():\n\n```bash\ndb.pessoas.insert({nome: \"felipe\", idade: 17, sexo: \"masculino\"});\n```\n\nComo visto o exemplo acima, usamos o padrão de escrita de arquivos json para inserir dados.\n\n### Consulta de dados\n\nPara consultarmos uma collection e observar os dados que existem nela de 2 formas:\n\n```bash\ndb.nomeDaCollection.find();\n```\nou\n\n```bash\ndb.nomeDaCollection.find().pretty();\n```\n\nA diferença é simples! Na primeira opção temos como output os dados jogados sem nenhuma organização, na segunda, com o implemento do método `.pretty()` os dados são mostrados de uma forma muito mais agradável e legível. Exemplo:\n\n```bash\ndb.pessoas.find().pretty();\n\n//output\n\n{\n\t\"_id\" : ObjectId(\"55b190caf8ab876af97e521b\"),\n\t\"nome\" : \"felipe\",\n\t\"idade\" : 17,\n\t\"sexo\" : \"Masculino\"\n}\n\n```\n### Update de Dados\n\nNo mongoDB, o método `update()` serve como método de atualização de algum dado, como também de criação daquele campo caso não exista o campo.\n\n```bash\ndb.nomeDaCollection.update(query, modificador, callback);\n```\n\nO método `update()` recebe três parâmetros, sendo eles `query`, que vai ser **ONDE** nós vamos alterar os dados, `modificador`, que vai ser **PELO QUE** aquele dado vai ser alterado, e um callback. Vejamos um exemplo:\n\n```bash\ndb.pessoas.update({name: \"felipe\"}, { $set:{idade: 20} });\n```\n\nNesse exemplo, estamos dizendo que estamos alterando o valor do campo idade onde o `name` do dado for \"felipe\".\n\n*Observe que no 2º parametro utilizamos o `$set` para descrevermos que apenas aquela chave de **campo: valor** vai ser alterada quando executarmos o método, caso o `$set` não seja incluído, todos os campos de todos os dados vão ser substituidos.*\n\n### Remover Dados\n\nPara removermos dados de uma collection utilizamos o comando:\n\n```bash\ndb.nomeDaCollection.remove();\n```\n\nComo parâmetro do método `.remove()` passsamos o dado que queremos alterar. Veja o exemplo:\n\n```bash\ndb.pessoas.remove({name: \"felipe\"});\n```\n\nCom isso, acabo de remover todos os dados do usuário que possui o `name` como \"felipe\";\n\n*Para removermos todos os dados da collection basta passar como parâmetro `{}` no método `.remove()`.*\n\n### Deletar Collections e Base de dados\n\nPara deletar um collection usamos o comando:\n\n```bash\ndb.nomeDaCollection.drop();\n```\n\n*lembrando que o mongo não pede confirmação para deletar os dados, então avalie corretamente se a collection selecionada é a que você quer apagar.*\n\nPara deletar uma base de dados, usamos o comando:\n\n```bash\ndb.dropDatabase();\n```\n\nCom isso temos o básico em MongoDB. Existem muito mais coisas a se aprender sobre essa ferramenta fantástica. [Leia mais na documentação oficial](http://docs.mongodb.org/).\n","slug":"Um-pouco-de-MongoDB","published":1,"updated":"2016-02-05T14:48:27.000Z","layout":"post","photos":[],"link":"","_id":"cil5u7s2a001cx4w8zsnbw23s"},{"title":"Um ano como Front end Developer","date":"2015-05-25T13:03:32.000Z","comments":1,"music":"ACDC - Shoot to Thrill","musicLink":"https://open.spotify.com/track/6GzCkTddOn1vSln1gbSr8y","timeRead":"7 minutos","_content":"<img src=\"/images/posts/fif2014-post.jpg\" alt='Front in Fortaleza 2014' title='Front in Fortaleza 2014' >\n\nUm ano como desenvolvedor front end, novas experiências de vida, muitos novos amigos. Aprender que a comunidade é muito mais importante que muitas outras coisas, conhecer pessoas que buscam objetivos e metas comparadas as suas, é entusiasmante, é sensacional e, acima de tudo essencial quando se busca ser um profissional com diferencial...\n\n<!--more-->\n\nEssa foto representa o início de um ano que estava por vir cheio de novas conquistas, conhecimentos, amigos, etc. Alí estou eu, ao lado do brother de vermelho, de calça branca, feliz pra caramba, sendo aquele momento de consolidação de uma espera que parecia inacabável...\n\nSempre gosto de falar como entrei no mundo de desenvolvimento, dai então comecei de fato a pensar em uma forma de fazer isso, e como tenho o blog como meu \"porta voz\" para o mundo, resolvi escrever um post sobre o assunto, vindo em conjunto a essa ideia, resolvi escrever um em comemoração ao meu 1º ano como Front end Developer, falando sobre tudo que me motivou e ainda me motivam a continuar na carreira e prosperar junto com amigos e parceiros de trabalho.\n\n### Um pouco da minha história\nDesde os meus 13 anos de idade eu sou apaixonaaaado por sites, por desenvolvimento, enfim, por todas as coisas que incluam internet e interatividade. Desde esse tempo eu sempre vinha atrás de como conseguir o meu lugar naquele meio fascinante que era a internet, poxa, era sensacional quando eu entrava em um site e um desenho ou uma animação seguia o meu ponteiro do mouse pra onde quer que ele fosse, eu ficava super entusiasmado para saber o que acontecia por trás daquilo tudo! Depois de um certo tempo descobri que era possível criar ~~super sites~~ com o [Blogger](https://www.blogger.com), dai então não perdi tempo e fui atrás de desmitificar o mundo mágico do Blogger...\n\nLogo de cara achei super legal ter um painel onde eu poderia fazer tudo sem ao menos editar 1 linha de código, eu me senti um Desenvolvedor Fuck Year quando eu criei o meu [primeiro site com o blogger](http://lipejogos-jogos.blogspot.com.br/) - e sim ele é uma droga -, caramba a sensação de ter uma URL só pra mim, onde as pessoas poderiam ver o que eu estava fazendo era simplesmente S.E.N.S.A.C.I.O.N.A.L! <br />\nSó que com o tempo, ficar com aqueles templates ~~ridículos~~ padrões do Blogger começou a não ser tão fascinante como no início, foi ai que eu comecei ir atrás de novas experiências - digo que se o YouTube liberasse diploma, eu seria formado em muiita coisa.. - simplesmente eu passava o dia inteiro atrás de vídeos que me ensinassem a modificar aquele padrão todo, foi dai que as coisas começaram a melhorar..\n\nDai com o aumento da curiosidade a conhecimento eu parei e falei \"Agora eu vou criar um blog que tenha alguma utilidade de fato\", foi dai que surgiu o [Samplle Downs](http://samplledowns.blogspot.com.br/), sendo esse um site onde as pessoas poderiam fazer downloads, fazer parceria, essas coisas, durante os anos eu fui apenas 'matendo' aquele blog que possuia relativamente um público diário legal, com os enormes 85 visitas... Lembro-me muito bem quando escrevia no papel a URL e distribuia entre os meus amigos, pedindo a eles para acessar e me darem um feedback sobre ele. Com o passar dos anos, depois de muitas postagens, divulgações externas, parcerias com outros blog's que tinha o mesmo foco, fez com que em 1 dia, eu conseguisse uma das meus maiores conquistas minhas com aquele blog, que foi a marca de 1001 visitantes em 1 dia, caramba eu me senti realizado, caramba 1001 acessos em um dia fizeram com o meu esforço valesse muito a pena. Depois de algum tempo eu deixei de lado aquele blog, o tempo não era muito favorável e eu não estava com aquele ânimo todo, e sai daquilo tudo.\n\n### O dia em que me tornei um viciado\n\n08 de Maio de 2014 foi o dia em que me mostraram o mundo mágico do Front end Developer, dai pronto, a partir dali eu falei \"Cara, isso é foda, é tudo o que eu sempre quis ser!\", esse ser - foda, parceiro, amigo e um exemplo - responsável por me abrir os olhos e me mostrar as maravilhas desse mundo foi [Elias Oliveira](https://www.facebook.com/faeliaso) - pelo qual eu sou um admirador por diversas outras causas - a palestra dele foi na minha escola. Elias falou sobre a 1ª Edição do [Front in Fortaleza](http://www.frontinfortaleza.com.br/) que iria ocorre 8 dias depois dali, e sobre o Desenvolvedor Front end, quais eram as importâncias e tudo mais, ele não sabia, mais ali, ele estava criando e alimentando o pensamento de um jovem garoto que de cara se apaixonou por aquilo.  \n\nPulando um pouco na parte de como eu consegui ir para o evento, finalmente chegou o grande dia, lembro-me que diariamente conferia a programação do evento, vendo o nome dos palestrantes, os assuntos, porém, como era um jovem aspirante naquilo tudo, resolvi esperar o dia do evento a me arriscar e estudar coisas malucas.\n\nDurante o evento, a cada palestra nova que rolava, meus olhos brilhavam e eu ficava pensando, \"Caramba, existem coisas fantásticas para se aprender e eu não conhecia\", e de fato, eu pouco conhecia sobre desenvolvimento, uma das palestras mais legais que conferi foi do [Almir Filho](http://twitter.com/almirfilho), tendo como o assunto da palestra *Esse cara é o Grunt*, falou sobre o task runner e como poderiamos facilitar a vida usando ele e tudo mais, foi irado, conhecer pessoas que são consideradas 'monstros' no mundo do desenvolvimento, entre elas, [Caio Gondim](http://twitter.com/caio_gondim), [Suissa](http://twitter.com/osuissa) e muitos outros...\n\nFora os palestrantes, fazer amizades com muitos dos que estavam presentes no dia do evento, com certeza fez toda a diferença pro futuro bem próximo que estava por vir, foi alí que de fato meus olhos se abriram para um mundo de possibilidades e aprendizados, conhecer pessoas que como eu estava iniciando, e outras mais experientes, que estavam disposta a ajudar.\n\nSaindo um pouco sobre o assunto, um diferencial que vejo no mundo do desenvolvimento em sí, as pessoas são super dispostas a ajudar, dentre todas as pessoas - que foram muitas - que eu ia atrás de tirar uma dúvida ou pedir ajuda, **sempre** foram gentis e super antenciosas com o meu aprendizado, e isso é raro encontrar, e ter esse 'abraço' de muita gente é super legal e importantíssimo para aumentar a quantidade de pessoas que se arriscam nesse mundo.. Fica o meu singelo **OBRIGADO** a todos que um dia me ajudaram, me deram dicas, etc...\n\n\n### Algumas conquistas e coisas mais\n\n\nFalar sobre as minhas conquistas nesse período curto, é algo que me deixa animado, todos nós temos orgulho do que conseguimos, com garra, esforço e muita dedicação, dentre elas e creio que uma das maiores seja o meu próprio Blog, foi aqui que eu comecei a compartilhar o meu conhecimento, falar de mim, de alguma ferramenta, de palestras, enfim, o que der na telha e eu considerar legal para se escrever. Novamente, sem amigos e outras pessoas para me guiarem nesse caminho até o primeiro artigo ir pro ar, eu ficaria estagnado e a evolução ocorreria de forma mais lenta. Outra conquista - recente - porém considero muito pra mim, foi a criação junto com meu brother [Matheus Albuquerque](http://twitter.com/mabrasil_io) da criação do [Aplicativo sobre a 2ª edição do Front in Fortaleza](https://play.google.com/store/apps/details?id=com.devevents.frontinfortaleza), foi uma correria, em tempo muiiito curto - 14 dias para ser mais preciso - porém, graças a ele e muito esforço conseguimos criar o aplicativo que foi pra gente uma conquista legal e foi super apoiada por quem testou e tudo mais..  \n\nDentre outras tantas conquistas considero as amizades a maior de todas, conhecer pessoas que eu admiro, pessoas que motivam outras centenas de pessoas e acima de tudo, ajudam muita gente, com certeza, foi a maior das **RECOMPENSAS**.\n\n<img src=\"/images/posts/fif2015.jpg\" alt='Front in Fortaleza 2015' title='Front in Fortaleza 2015' >\n\nEssa foi a foto de finalização da 2ª Edição do Front in Fortaleza, ali estou eu no meio, cercado de gente que me motivam a seguir no caminho que a pouco mais de 1 ano eu entrei de fato, claro que existem muitas outras coisas que eu poderia citar, pessoas, porém fica o agradecimento, a amigos e a todos que me ajudam bastante, que venham muitas novas experiencias, projetos, amigos, eventos e acima de tudo conhecimento!\n\nObrigado a todos que leram o artigo, um abraço!\n","source":"_posts/Um-ano-como-front-end-developer.md","raw":"---\ntitle: Um ano como Front end Developer\ndate: 2015-05-25 10:03:32\ntags: ['frontend', 'life', 'comunity', 'lifestyle']\ncomments: true\nmusic: \"ACDC - Shoot to Thrill\"\nmusicLink: \"https://open.spotify.com/track/6GzCkTddOn1vSln1gbSr8y\"\ntimeRead: 7 minutos\n---\n<img src=\"/images/posts/fif2014-post.jpg\" alt='Front in Fortaleza 2014' title='Front in Fortaleza 2014' >\n\nUm ano como desenvolvedor front end, novas experiências de vida, muitos novos amigos. Aprender que a comunidade é muito mais importante que muitas outras coisas, conhecer pessoas que buscam objetivos e metas comparadas as suas, é entusiasmante, é sensacional e, acima de tudo essencial quando se busca ser um profissional com diferencial...\n\n<!--more-->\n\nEssa foto representa o início de um ano que estava por vir cheio de novas conquistas, conhecimentos, amigos, etc. Alí estou eu, ao lado do brother de vermelho, de calça branca, feliz pra caramba, sendo aquele momento de consolidação de uma espera que parecia inacabável...\n\nSempre gosto de falar como entrei no mundo de desenvolvimento, dai então comecei de fato a pensar em uma forma de fazer isso, e como tenho o blog como meu \"porta voz\" para o mundo, resolvi escrever um post sobre o assunto, vindo em conjunto a essa ideia, resolvi escrever um em comemoração ao meu 1º ano como Front end Developer, falando sobre tudo que me motivou e ainda me motivam a continuar na carreira e prosperar junto com amigos e parceiros de trabalho.\n\n### Um pouco da minha história\nDesde os meus 13 anos de idade eu sou apaixonaaaado por sites, por desenvolvimento, enfim, por todas as coisas que incluam internet e interatividade. Desde esse tempo eu sempre vinha atrás de como conseguir o meu lugar naquele meio fascinante que era a internet, poxa, era sensacional quando eu entrava em um site e um desenho ou uma animação seguia o meu ponteiro do mouse pra onde quer que ele fosse, eu ficava super entusiasmado para saber o que acontecia por trás daquilo tudo! Depois de um certo tempo descobri que era possível criar ~~super sites~~ com o [Blogger](https://www.blogger.com), dai então não perdi tempo e fui atrás de desmitificar o mundo mágico do Blogger...\n\nLogo de cara achei super legal ter um painel onde eu poderia fazer tudo sem ao menos editar 1 linha de código, eu me senti um Desenvolvedor Fuck Year quando eu criei o meu [primeiro site com o blogger](http://lipejogos-jogos.blogspot.com.br/) - e sim ele é uma droga -, caramba a sensação de ter uma URL só pra mim, onde as pessoas poderiam ver o que eu estava fazendo era simplesmente S.E.N.S.A.C.I.O.N.A.L! <br />\nSó que com o tempo, ficar com aqueles templates ~~ridículos~~ padrões do Blogger começou a não ser tão fascinante como no início, foi ai que eu comecei ir atrás de novas experiências - digo que se o YouTube liberasse diploma, eu seria formado em muiita coisa.. - simplesmente eu passava o dia inteiro atrás de vídeos que me ensinassem a modificar aquele padrão todo, foi dai que as coisas começaram a melhorar..\n\nDai com o aumento da curiosidade a conhecimento eu parei e falei \"Agora eu vou criar um blog que tenha alguma utilidade de fato\", foi dai que surgiu o [Samplle Downs](http://samplledowns.blogspot.com.br/), sendo esse um site onde as pessoas poderiam fazer downloads, fazer parceria, essas coisas, durante os anos eu fui apenas 'matendo' aquele blog que possuia relativamente um público diário legal, com os enormes 85 visitas... Lembro-me muito bem quando escrevia no papel a URL e distribuia entre os meus amigos, pedindo a eles para acessar e me darem um feedback sobre ele. Com o passar dos anos, depois de muitas postagens, divulgações externas, parcerias com outros blog's que tinha o mesmo foco, fez com que em 1 dia, eu conseguisse uma das meus maiores conquistas minhas com aquele blog, que foi a marca de 1001 visitantes em 1 dia, caramba eu me senti realizado, caramba 1001 acessos em um dia fizeram com o meu esforço valesse muito a pena. Depois de algum tempo eu deixei de lado aquele blog, o tempo não era muito favorável e eu não estava com aquele ânimo todo, e sai daquilo tudo.\n\n### O dia em que me tornei um viciado\n\n08 de Maio de 2014 foi o dia em que me mostraram o mundo mágico do Front end Developer, dai pronto, a partir dali eu falei \"Cara, isso é foda, é tudo o que eu sempre quis ser!\", esse ser - foda, parceiro, amigo e um exemplo - responsável por me abrir os olhos e me mostrar as maravilhas desse mundo foi [Elias Oliveira](https://www.facebook.com/faeliaso) - pelo qual eu sou um admirador por diversas outras causas - a palestra dele foi na minha escola. Elias falou sobre a 1ª Edição do [Front in Fortaleza](http://www.frontinfortaleza.com.br/) que iria ocorre 8 dias depois dali, e sobre o Desenvolvedor Front end, quais eram as importâncias e tudo mais, ele não sabia, mais ali, ele estava criando e alimentando o pensamento de um jovem garoto que de cara se apaixonou por aquilo.  \n\nPulando um pouco na parte de como eu consegui ir para o evento, finalmente chegou o grande dia, lembro-me que diariamente conferia a programação do evento, vendo o nome dos palestrantes, os assuntos, porém, como era um jovem aspirante naquilo tudo, resolvi esperar o dia do evento a me arriscar e estudar coisas malucas.\n\nDurante o evento, a cada palestra nova que rolava, meus olhos brilhavam e eu ficava pensando, \"Caramba, existem coisas fantásticas para se aprender e eu não conhecia\", e de fato, eu pouco conhecia sobre desenvolvimento, uma das palestras mais legais que conferi foi do [Almir Filho](http://twitter.com/almirfilho), tendo como o assunto da palestra *Esse cara é o Grunt*, falou sobre o task runner e como poderiamos facilitar a vida usando ele e tudo mais, foi irado, conhecer pessoas que são consideradas 'monstros' no mundo do desenvolvimento, entre elas, [Caio Gondim](http://twitter.com/caio_gondim), [Suissa](http://twitter.com/osuissa) e muitos outros...\n\nFora os palestrantes, fazer amizades com muitos dos que estavam presentes no dia do evento, com certeza fez toda a diferença pro futuro bem próximo que estava por vir, foi alí que de fato meus olhos se abriram para um mundo de possibilidades e aprendizados, conhecer pessoas que como eu estava iniciando, e outras mais experientes, que estavam disposta a ajudar.\n\nSaindo um pouco sobre o assunto, um diferencial que vejo no mundo do desenvolvimento em sí, as pessoas são super dispostas a ajudar, dentre todas as pessoas - que foram muitas - que eu ia atrás de tirar uma dúvida ou pedir ajuda, **sempre** foram gentis e super antenciosas com o meu aprendizado, e isso é raro encontrar, e ter esse 'abraço' de muita gente é super legal e importantíssimo para aumentar a quantidade de pessoas que se arriscam nesse mundo.. Fica o meu singelo **OBRIGADO** a todos que um dia me ajudaram, me deram dicas, etc...\n\n\n### Algumas conquistas e coisas mais\n\n\nFalar sobre as minhas conquistas nesse período curto, é algo que me deixa animado, todos nós temos orgulho do que conseguimos, com garra, esforço e muita dedicação, dentre elas e creio que uma das maiores seja o meu próprio Blog, foi aqui que eu comecei a compartilhar o meu conhecimento, falar de mim, de alguma ferramenta, de palestras, enfim, o que der na telha e eu considerar legal para se escrever. Novamente, sem amigos e outras pessoas para me guiarem nesse caminho até o primeiro artigo ir pro ar, eu ficaria estagnado e a evolução ocorreria de forma mais lenta. Outra conquista - recente - porém considero muito pra mim, foi a criação junto com meu brother [Matheus Albuquerque](http://twitter.com/mabrasil_io) da criação do [Aplicativo sobre a 2ª edição do Front in Fortaleza](https://play.google.com/store/apps/details?id=com.devevents.frontinfortaleza), foi uma correria, em tempo muiiito curto - 14 dias para ser mais preciso - porém, graças a ele e muito esforço conseguimos criar o aplicativo que foi pra gente uma conquista legal e foi super apoiada por quem testou e tudo mais..  \n\nDentre outras tantas conquistas considero as amizades a maior de todas, conhecer pessoas que eu admiro, pessoas que motivam outras centenas de pessoas e acima de tudo, ajudam muita gente, com certeza, foi a maior das **RECOMPENSAS**.\n\n<img src=\"/images/posts/fif2015.jpg\" alt='Front in Fortaleza 2015' title='Front in Fortaleza 2015' >\n\nEssa foi a foto de finalização da 2ª Edição do Front in Fortaleza, ali estou eu no meio, cercado de gente que me motivam a seguir no caminho que a pouco mais de 1 ano eu entrei de fato, claro que existem muitas outras coisas que eu poderia citar, pessoas, porém fica o agradecimento, a amigos e a todos que me ajudam bastante, que venham muitas novas experiencias, projetos, amigos, eventos e acima de tudo conhecimento!\n\nObrigado a todos que leram o artigo, um abraço!\n","slug":"Um-ano-como-front-end-developer","published":1,"updated":"2016-02-05T14:48:27.000Z","layout":"post","photos":[],"link":"","_id":"cil5u7s2g001hx4w8wgwikcfk"},{"title":"AngularJS | Formulários","date":"2015-09-14T21:20:07.000Z","comments":1,"music":"Red Radio City - Two out of three ain't rad","musicLink":"https://open.spotify.com/track/2A9pBtvEuy3Kp2WcJawm4L","timeRead":"8 minutes","_content":"\n<img src=\"/images/posts/angularjs-forms.png\" alt=\"AngularJS | Formulários\" title=\"AngularJS | Formulários\">\n\nValidar formulários é uma atividade um pouco chata, porém, super importante de ser praticada, nesse artigo falarei um pouco sobre como podemos utilizar o AngularJS para nos auxiliar a validarmos formulários de forma simples e rápida.\n\n<!--more-->\n\nUmas das coisas mais interessantes de se validar com o AngularJS é que podemos acessar diversos estados do nosso formulário, de um campo em específico e por ai vai.\n\nComeçando por uma análise simples de estados do nosso formulário, vamos considerar o seguinte formulário: \n\n*recomendo criar um arquivo para exemplo para acompanhar mais precisamente o artigo com os resultados que serão obtidos..*\n```html\n<!DOCTYPE html >\n<html lang=\"pt-BR\">\n<head>\n\t<title>AngularJS | Formulários </title>\n\t<link   href=\"bootstrap.min.css\" rel=\"stylesheet\" >\n\t<script src=\"angular.min.js\" ></script>\n</head>\n\n<body ng-app>\n<nav class=\"navbar navbar-inverse navbar-fixed-top\" >\n\t<div class=\"container\">\n\t\t<div class=\"navbar-header\">\n\t\t\t<a class=\"navbar-brand\"\n\t\t\t   href=\"/\" >Formulários\n\t\t\t</a>\n\t\t</div>\n\t</div>\n</nav>\n\n<div class=\"container main-content\">\n\t<form name=\"formName\">\n\t\t<div class=\"form-group\" >\n\t\t\t<label for=\"name\" >Name</label >\n\t\t\t<input type=\"text\"\n\t\t\t       class=\"form-control\"\n\t\t\t       ng-model=\"formField.name\"\n\t\t\t       required\n\t\t\t       name=\"name\">\n\t\t</div>\n\t\t<div class=\"form-group\" >\n\t\t\t<label for=\"email\" >Email</label >\n\t\t\t<input type=\"email\"\n\t\t\t       class=\"form-control\"\n\t\t\t       ng-model=\"formField.email\"\n\t\t\t       required\n\t\t\t       name=\"email\" >\n\t\t</div>\n\t\t<div class=\"form-group\">\n\t\t\t<button class=\"btn btn-primary\">Register\n\t\t\t</button>\n\t\t</div>\n\t</form >\n\t<pre>{{ formName | json }}</pre>\n</div>\n</body>\n</html>\t\n```\n\nNo exemplo acima temos uma 2 tipos de campos, um *name* e um *email*, todos eles com um *ng-model* e um *name* definidos, vale lembrar que o uso do atributo **required** é super importante e irá nos auxiliar mais na frente. \n\nSe olharmos o código na linha **41**, estamos fazendo um bind do formulário, e filtrando-o para JSON. O resultado nos mostra vários estados do formulário e também dos campos. Dentre todos os estados, iremos trabalhar com alguns mais expecificamente: \n\n- **$dirty** - Avalia se o formulário foi utilizado.\n- **$pristine** - Avalia se o formulário **não** foi utilizado.\n- **$invalid** - Avalia se o formulário está invalido.\n- **$valid** - Avalia se o formulário está válido\n- **$name** -  Retorna o nome do formulário. \n\n*Todos acima podem ser utilizados em campos específicos e não somente no formulário por completo.*\n\nComo podemos ver como retorno do nosso *formName | json*, obtemos uma json com um conjunto de estados: \n```json\n{\n  \"$error\": {},\n  \"$name\": \"formName\",\n  \"$dirty\": false,\n  \"$pristine\": true,\n  \"$valid\": true,\n  \"$invalid\": false,\n  \"$submitted\": false\n}\n\n```\n\nEsses são os atuais estados do formulário, só que dai vem a pergunta, \"Qual a importância desses estados pra mim?\", a resposta é simples, o AngularJS nos oferece algumas diretivas que com elas podemos adicionar um comportamento ao formulário de acordo com esses estados. \n\nUmas das diretivas que podemos utilizar é a *ng-class*, que adiciona ou remove classes no DOM de acordo com uma condição, que pode ser predefinida, ou comandada por um controller, etc., onde com elas, poderemos fazer uso no nossa view para informar que o campo está ou não corretamente preenchido. [leia um pouco sobre essa diretiva.](https://docs.angularjs.org/api/ng/directive/ngClass)\n\nUsaremos o seguinte exemplo, adicionar uma classe quando o campo de email for inválido e outra quando o campo for válido. Iremos utilizar os estados $invalid e $valid do campo para esse exemplo. O uso da atributo **required** vai nos auxiliar bastante. Antes de tudo vamos analisar os estados especificamente do campo de email:\n\n```html\n<div class=\"form-group\" >\n\t\t\t<label for=\"email\" >Email</label >\n\t\t\t<input type=\"email\"\n\t\t\t       class=\"form-control\"\n\t\t\t       ng-model=\"formField.email\"\n\t\t\t       required\n\t\t\t       name=\"email\" >\n\t\t</div>\n\t\t<pre>\n\t\t\t {{formName.email | json}}\n\t\t</pre>\n```\n\nCom o campo ainda não preenchido, temos o seguintes estados:\n\n```json\n{\n  \"$validators\": {},\n  \"$asyncValidators\": {},\n  \"$parsers\": [],\n  \"$formatters\": [\n    null\n  ],\n  \"$viewChangeListeners\": [],\n  \"$untouched\": true,\n  \"$touched\": false,\n  \"$pristine\": true,\n  \"$dirty\": false,\n  \"$valid\": false,\n  \"$invalid\": true,\n  \"$error\": {\n    \"required\": true\n  },\n  \"$name\": \"email\",\n  \"$options\": null\n}\n```\n\nOs estados $valid e $invalid retornam `false` e `true` respectivamente. Segundo os nossos estados, o campo email está invalido. Com essas informações já podemos comecar com o uso da diretiva *ng-class*. A diretiva será adicionada na tag `div`, a diretiva recebe como parâmetro um objeto, onde lá iremos fazer o uso das classes que queremos no elemento, sintaxe ficará desta forma: \n\n```html \n<div class=\"form-group\" ng-class=\"{'className': valor}\">\n<!-- continuação do codigo -->\n```\n\nNos exemplos, iremos utilizar duas classes do framework Bootstrap, a classe `has-warning` para quando o campo estiver inválido e a classe `has-success` quando o campo estiver válido. Para podermos acessar estados específico, basta adicionar o nome do mesmo, logo apoś o nome do campo, dessa forma `campo.estado`, como por exemplo, se quisermos acessar o estado do campo *email* no estado **$dirty**, a sintaxe ficaria dessa forma: \n\n```json \n{{ formName.email.$dirty }}\n```\n\nO valor retornado será um booleano, e é aqui que nós vamos usar para implementar as classes. Continuando com o exemplo do campo de email: \n\n```html\n<div class=\"form-group\" ng-class=\"{\n\t'has-warning': formName.email.$invalid, \n\t'has-success': formName.email.$valid}\"\n>\n```\n\nSe estivessemos conversando com a diretiva, estariamos falando o seguinte: \"**ôôô ng-class, quando o campo for inválido, tu adiciona a classe `has-warning`, quando ele for válido tu adiciona a `has-success` beleza?**\".\n\nDessa forma, estamos alterando as classes do campo de acordo com estado do elemento, sendo ele válido ou não. Existem algumas outras diretivas que nos auxiliam no desenvolvimento e na validação dos nossos formulários. Em outros artigos, poderemos abordar sobre esse assunto utilizando outras formas de validação. [Veja o resultado final completo.](https://github.com/felipesousa/theme-hexo-blogger/blob/master/code-example/angular-js-forms.html)\n\nBem galera, era isso, caso encontre algum erro, algo que deveria ser implemenetado, ou algum comentário sobre o artigo, basta comentar. Até a próxima o/.","source":"_posts/Angularjs-formularios.md","raw":"---\ntitle: 'AngularJS | Formulários'\ndate: 2015-09-14 18:20:07\ntags: ['angularjs', 'frontend', 'html5']\ncomments: true\nmusic: \"Red Radio City - Two out of three ain't rad\"\nmusicLink: \"https://open.spotify.com/track/2A9pBtvEuy3Kp2WcJawm4L\"\ntimeRead: 8 minutes\n---\n\n<img src=\"/images/posts/angularjs-forms.png\" alt=\"AngularJS | Formulários\" title=\"AngularJS | Formulários\">\n\nValidar formulários é uma atividade um pouco chata, porém, super importante de ser praticada, nesse artigo falarei um pouco sobre como podemos utilizar o AngularJS para nos auxiliar a validarmos formulários de forma simples e rápida.\n\n<!--more-->\n\nUmas das coisas mais interessantes de se validar com o AngularJS é que podemos acessar diversos estados do nosso formulário, de um campo em específico e por ai vai.\n\nComeçando por uma análise simples de estados do nosso formulário, vamos considerar o seguinte formulário: \n\n*recomendo criar um arquivo para exemplo para acompanhar mais precisamente o artigo com os resultados que serão obtidos..*\n```html\n<!DOCTYPE html >\n<html lang=\"pt-BR\">\n<head>\n\t<title>AngularJS | Formulários </title>\n\t<link   href=\"bootstrap.min.css\" rel=\"stylesheet\" >\n\t<script src=\"angular.min.js\" ></script>\n</head>\n\n<body ng-app>\n<nav class=\"navbar navbar-inverse navbar-fixed-top\" >\n\t<div class=\"container\">\n\t\t<div class=\"navbar-header\">\n\t\t\t<a class=\"navbar-brand\"\n\t\t\t   href=\"/\" >Formulários\n\t\t\t</a>\n\t\t</div>\n\t</div>\n</nav>\n\n<div class=\"container main-content\">\n\t<form name=\"formName\">\n\t\t<div class=\"form-group\" >\n\t\t\t<label for=\"name\" >Name</label >\n\t\t\t<input type=\"text\"\n\t\t\t       class=\"form-control\"\n\t\t\t       ng-model=\"formField.name\"\n\t\t\t       required\n\t\t\t       name=\"name\">\n\t\t</div>\n\t\t<div class=\"form-group\" >\n\t\t\t<label for=\"email\" >Email</label >\n\t\t\t<input type=\"email\"\n\t\t\t       class=\"form-control\"\n\t\t\t       ng-model=\"formField.email\"\n\t\t\t       required\n\t\t\t       name=\"email\" >\n\t\t</div>\n\t\t<div class=\"form-group\">\n\t\t\t<button class=\"btn btn-primary\">Register\n\t\t\t</button>\n\t\t</div>\n\t</form >\n\t<pre>{{ formName | json }}</pre>\n</div>\n</body>\n</html>\t\n```\n\nNo exemplo acima temos uma 2 tipos de campos, um *name* e um *email*, todos eles com um *ng-model* e um *name* definidos, vale lembrar que o uso do atributo **required** é super importante e irá nos auxiliar mais na frente. \n\nSe olharmos o código na linha **41**, estamos fazendo um bind do formulário, e filtrando-o para JSON. O resultado nos mostra vários estados do formulário e também dos campos. Dentre todos os estados, iremos trabalhar com alguns mais expecificamente: \n\n- **$dirty** - Avalia se o formulário foi utilizado.\n- **$pristine** - Avalia se o formulário **não** foi utilizado.\n- **$invalid** - Avalia se o formulário está invalido.\n- **$valid** - Avalia se o formulário está válido\n- **$name** -  Retorna o nome do formulário. \n\n*Todos acima podem ser utilizados em campos específicos e não somente no formulário por completo.*\n\nComo podemos ver como retorno do nosso *formName | json*, obtemos uma json com um conjunto de estados: \n```json\n{\n  \"$error\": {},\n  \"$name\": \"formName\",\n  \"$dirty\": false,\n  \"$pristine\": true,\n  \"$valid\": true,\n  \"$invalid\": false,\n  \"$submitted\": false\n}\n\n```\n\nEsses são os atuais estados do formulário, só que dai vem a pergunta, \"Qual a importância desses estados pra mim?\", a resposta é simples, o AngularJS nos oferece algumas diretivas que com elas podemos adicionar um comportamento ao formulário de acordo com esses estados. \n\nUmas das diretivas que podemos utilizar é a *ng-class*, que adiciona ou remove classes no DOM de acordo com uma condição, que pode ser predefinida, ou comandada por um controller, etc., onde com elas, poderemos fazer uso no nossa view para informar que o campo está ou não corretamente preenchido. [leia um pouco sobre essa diretiva.](https://docs.angularjs.org/api/ng/directive/ngClass)\n\nUsaremos o seguinte exemplo, adicionar uma classe quando o campo de email for inválido e outra quando o campo for válido. Iremos utilizar os estados $invalid e $valid do campo para esse exemplo. O uso da atributo **required** vai nos auxiliar bastante. Antes de tudo vamos analisar os estados especificamente do campo de email:\n\n```html\n<div class=\"form-group\" >\n\t\t\t<label for=\"email\" >Email</label >\n\t\t\t<input type=\"email\"\n\t\t\t       class=\"form-control\"\n\t\t\t       ng-model=\"formField.email\"\n\t\t\t       required\n\t\t\t       name=\"email\" >\n\t\t</div>\n\t\t<pre>\n\t\t\t {{formName.email | json}}\n\t\t</pre>\n```\n\nCom o campo ainda não preenchido, temos o seguintes estados:\n\n```json\n{\n  \"$validators\": {},\n  \"$asyncValidators\": {},\n  \"$parsers\": [],\n  \"$formatters\": [\n    null\n  ],\n  \"$viewChangeListeners\": [],\n  \"$untouched\": true,\n  \"$touched\": false,\n  \"$pristine\": true,\n  \"$dirty\": false,\n  \"$valid\": false,\n  \"$invalid\": true,\n  \"$error\": {\n    \"required\": true\n  },\n  \"$name\": \"email\",\n  \"$options\": null\n}\n```\n\nOs estados $valid e $invalid retornam `false` e `true` respectivamente. Segundo os nossos estados, o campo email está invalido. Com essas informações já podemos comecar com o uso da diretiva *ng-class*. A diretiva será adicionada na tag `div`, a diretiva recebe como parâmetro um objeto, onde lá iremos fazer o uso das classes que queremos no elemento, sintaxe ficará desta forma: \n\n```html \n<div class=\"form-group\" ng-class=\"{'className': valor}\">\n<!-- continuação do codigo -->\n```\n\nNos exemplos, iremos utilizar duas classes do framework Bootstrap, a classe `has-warning` para quando o campo estiver inválido e a classe `has-success` quando o campo estiver válido. Para podermos acessar estados específico, basta adicionar o nome do mesmo, logo apoś o nome do campo, dessa forma `campo.estado`, como por exemplo, se quisermos acessar o estado do campo *email* no estado **$dirty**, a sintaxe ficaria dessa forma: \n\n```json \n{{ formName.email.$dirty }}\n```\n\nO valor retornado será um booleano, e é aqui que nós vamos usar para implementar as classes. Continuando com o exemplo do campo de email: \n\n```html\n<div class=\"form-group\" ng-class=\"{\n\t'has-warning': formName.email.$invalid, \n\t'has-success': formName.email.$valid}\"\n>\n```\n\nSe estivessemos conversando com a diretiva, estariamos falando o seguinte: \"**ôôô ng-class, quando o campo for inválido, tu adiciona a classe `has-warning`, quando ele for válido tu adiciona a `has-success` beleza?**\".\n\nDessa forma, estamos alterando as classes do campo de acordo com estado do elemento, sendo ele válido ou não. Existem algumas outras diretivas que nos auxiliam no desenvolvimento e na validação dos nossos formulários. Em outros artigos, poderemos abordar sobre esse assunto utilizando outras formas de validação. [Veja o resultado final completo.](https://github.com/felipesousa/theme-hexo-blogger/blob/master/code-example/angular-js-forms.html)\n\nBem galera, era isso, caso encontre algum erro, algo que deveria ser implemenetado, ou algum comentário sobre o artigo, basta comentar. Até a próxima o/.","slug":"Angularjs-formularios","published":1,"updated":"2016-02-05T14:48:27.000Z","layout":"post","photos":[],"link":"","_id":"cil5u7s2l001ox4w8iqhae36v"},{"title":"AngularJS | Filtros","date":"2015-09-02T22:08:50.000Z","comments":1,"music":"Sublime -Wrong Way","musicLink":"https://open.spotify.com/track/5cPfmNMC3AENizySC5oPu2","timeRead":"6 minutos","_content":"<img src=\"/images/posts/angularjs-filters.png\" alt=\"AngularJS | Filtros\" title=\"AngularJS | Filtros\">\n\n\nFala pessoal, depois de algum tempo sem escrever pro blog, resolvi levantar as mangas e por uma meta de no mínimo 1 artigo por semana, e quem sabe futuramente 1 por dia. Então, começando com o básico, resolvi escrever sobre um framework bastante conhecido - AngularJS - e sobre uma das 'ferramentas' interessante que ele nos pode proporcionar, sendo essas os chamados *filtros*.\n\n<!--more-->\n\nFiltros como o próprio nome diz, vai filtrar uma informação que será exibida ao usuário, importante lembrar que os filtros apenas formatam dado apenas para uma questão de ordem, ou organização para a visualização. Sendo assim, não vamos modificar os valores reais, apenas formatando e os ordenando para uma melhor 'leitura'.\n\nNo AngularJS filtros podem ser declarados na view ou na parte de trás da aplicação - controllers ou services - porém, para uma melhor compreensão e mais comum de se encontrar são filtros declarados na própria view.\n\n### Tipos de filtros\n\nOs tipos de filtros não são tão extensos, porém, com AngularJS você pode criar seus próprios filtros, iremos abordar sobre isso em outro artigo. A seguir uma lista com alguns tipos de filtros:\n\n- **currency** - Acrescenta uma moeda ao valor passado. ex: R$, $ entre outros.\n- **number** - Usados para formatar números.\n- **date** - Formata o valor em formato de data. Sendo possível inserir parametros para modificarmos o formato da data, etc.\n- **lowercase** - Converte tudo pra minúsculo.\n- **uppercase** - Converte tudo pra maiúsculo.\n- **limitTo** - Usado para limitar o quantidade de valores que serão apresentados. Limitar a quantidade de vezes que vai se repetir, etc.\n- **json** - formata para o modelo json.\n\nEsses são os principais tipos de filtros existentes no AngularJS, para mais informações e filtros, confira a [documentação oficial](https://docs.angularjs.org/api/ng/filter) do AngularJS.\n\n### Como utilizar filtros\n\nDepois de mostrarmos a principal usuabilidade de um filtro, e alguns dos principais tipos, vamos agora aprender como podemos usá-los em nossa aplicação, filtros são declarados por um `|` - pipeline - e logo após o tipo de filtro que vamos usar.\n\n```text\n{{Dado | Filtro:Parâmetro}}\n```\nAlguns filtros podem ser adicionados parâmetros para tirarmos melhor proveito, ou para uma melhor formatação do dado. Podemos também adicionar mais de um filtro ao mesmo valor.\n\n```text\n{{Dado | Filtro:Parâmetro | Filtro:Parâmetro}}\n```\nNesse modelo o filtro seguinte vai se basear no resultado do filtro anterior, e não do valor original.\nUsando esse tipo de declaração conseguimos filtrar nossas informações declarando o filtro na própria view. Porém, podemos fazer com que os valores já venha filtrados a partir de um controller ou um service.\n\n#### Usando filtros no controller\nNos controlers, os filtros mudam um pouco a nomeclatura, sendo todos eles seguidos de **Filter** depois do seu nome natural. Para utilizarmos um filtro, devemos importar o mesmo no controller.\n\n\n```javascript\nangular.module('myApp', [])\n.controller('mainCtrl', ['currencyFilter', '$scope', function(currencyFilter, $scope){}])\n```\n\nPara utilzar eles dentro do controller devemos adicionar seguinte sintaxe:\n\n```javascript\nnomeFilter(valoraAlterar, parâmetros)\n```\n\nNesse exemplo, criaremos uma função com o nome do filtro, passando alguns parametrôs, o 1º sendo o valor a ser filtrado e o 2º sendo os parametros do filtro. Com isso podemos chegar ao seguinte código:\n\n```javascript\nangular.module('myApp', [])\n.controller('mainCtrl', ['currencyFilter', '$scope', function(currencyFilter, $scope){\n  $scope.valor = currencyFilter(5000, \"R$\");\n}])\n```\n\nNesse exemplo eu converti o valor `5000`, utilizando o filtro `currencyFilter`, passando como parâmetro o tipo de moeda, que nesse caso foi `R$`, o valor na view, será retornado `R$5000,00`.\n\nEm relação a utilização do filtro na view, o uso nos controllers é um pouco mais complicado, porém, utilizar filtros na view pode em alguns casos afetar a performace da aplicação. Visto que os valores depois de recebidos ainda terão de ser formatados de acordo com o filtro declarado.\n\nO uso de filtros se resumem básicamente a esses exemplos, em uma continuação, mostrarei como poderemos criar nossos próprios filtros. Até o próximo artigo 0/.\n","source":"_posts/Angularjs-filtros.md","raw":"---\ntitle: 'AngularJS | Filtros'\ndate: 2015-09-02 19:08:50\ntags: ['angularjs', 'filtros', 'javascript']\ncomments: true\nmusic: \"Sublime -Wrong Way\"\nmusicLink: \"https://open.spotify.com/track/5cPfmNMC3AENizySC5oPu2\"\ntimeRead: 6 minutos\n---\n<img src=\"/images/posts/angularjs-filters.png\" alt=\"AngularJS | Filtros\" title=\"AngularJS | Filtros\">\n\n\nFala pessoal, depois de algum tempo sem escrever pro blog, resolvi levantar as mangas e por uma meta de no mínimo 1 artigo por semana, e quem sabe futuramente 1 por dia. Então, começando com o básico, resolvi escrever sobre um framework bastante conhecido - AngularJS - e sobre uma das 'ferramentas' interessante que ele nos pode proporcionar, sendo essas os chamados *filtros*.\n\n<!--more-->\n\nFiltros como o próprio nome diz, vai filtrar uma informação que será exibida ao usuário, importante lembrar que os filtros apenas formatam dado apenas para uma questão de ordem, ou organização para a visualização. Sendo assim, não vamos modificar os valores reais, apenas formatando e os ordenando para uma melhor 'leitura'.\n\nNo AngularJS filtros podem ser declarados na view ou na parte de trás da aplicação - controllers ou services - porém, para uma melhor compreensão e mais comum de se encontrar são filtros declarados na própria view.\n\n### Tipos de filtros\n\nOs tipos de filtros não são tão extensos, porém, com AngularJS você pode criar seus próprios filtros, iremos abordar sobre isso em outro artigo. A seguir uma lista com alguns tipos de filtros:\n\n- **currency** - Acrescenta uma moeda ao valor passado. ex: R$, $ entre outros.\n- **number** - Usados para formatar números.\n- **date** - Formata o valor em formato de data. Sendo possível inserir parametros para modificarmos o formato da data, etc.\n- **lowercase** - Converte tudo pra minúsculo.\n- **uppercase** - Converte tudo pra maiúsculo.\n- **limitTo** - Usado para limitar o quantidade de valores que serão apresentados. Limitar a quantidade de vezes que vai se repetir, etc.\n- **json** - formata para o modelo json.\n\nEsses são os principais tipos de filtros existentes no AngularJS, para mais informações e filtros, confira a [documentação oficial](https://docs.angularjs.org/api/ng/filter) do AngularJS.\n\n### Como utilizar filtros\n\nDepois de mostrarmos a principal usuabilidade de um filtro, e alguns dos principais tipos, vamos agora aprender como podemos usá-los em nossa aplicação, filtros são declarados por um `|` - pipeline - e logo após o tipo de filtro que vamos usar.\n\n```text\n{{Dado | Filtro:Parâmetro}}\n```\nAlguns filtros podem ser adicionados parâmetros para tirarmos melhor proveito, ou para uma melhor formatação do dado. Podemos também adicionar mais de um filtro ao mesmo valor.\n\n```text\n{{Dado | Filtro:Parâmetro | Filtro:Parâmetro}}\n```\nNesse modelo o filtro seguinte vai se basear no resultado do filtro anterior, e não do valor original.\nUsando esse tipo de declaração conseguimos filtrar nossas informações declarando o filtro na própria view. Porém, podemos fazer com que os valores já venha filtrados a partir de um controller ou um service.\n\n#### Usando filtros no controller\nNos controlers, os filtros mudam um pouco a nomeclatura, sendo todos eles seguidos de **Filter** depois do seu nome natural. Para utilizarmos um filtro, devemos importar o mesmo no controller.\n\n\n```javascript\nangular.module('myApp', [])\n.controller('mainCtrl', ['currencyFilter', '$scope', function(currencyFilter, $scope){}])\n```\n\nPara utilzar eles dentro do controller devemos adicionar seguinte sintaxe:\n\n```javascript\nnomeFilter(valoraAlterar, parâmetros)\n```\n\nNesse exemplo, criaremos uma função com o nome do filtro, passando alguns parametrôs, o 1º sendo o valor a ser filtrado e o 2º sendo os parametros do filtro. Com isso podemos chegar ao seguinte código:\n\n```javascript\nangular.module('myApp', [])\n.controller('mainCtrl', ['currencyFilter', '$scope', function(currencyFilter, $scope){\n  $scope.valor = currencyFilter(5000, \"R$\");\n}])\n```\n\nNesse exemplo eu converti o valor `5000`, utilizando o filtro `currencyFilter`, passando como parâmetro o tipo de moeda, que nesse caso foi `R$`, o valor na view, será retornado `R$5000,00`.\n\nEm relação a utilização do filtro na view, o uso nos controllers é um pouco mais complicado, porém, utilizar filtros na view pode em alguns casos afetar a performace da aplicação. Visto que os valores depois de recebidos ainda terão de ser formatados de acordo com o filtro declarado.\n\nO uso de filtros se resumem básicamente a esses exemplos, em uma continuação, mostrarei como poderemos criar nossos próprios filtros. Até o próximo artigo 0/.\n","slug":"Angularjs-filtros","published":1,"updated":"2016-02-05T14:48:27.000Z","layout":"post","photos":[],"link":"","_id":"cil5u7s2q001ux4w86jlvxjk2"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cil5u7rzs0000x4w8fy62qnqd","tag_id":"cil5u7s040001x4w8rw82v8g8","_id":"cil5u7s080004x4w8a5m3h1pi"},{"post_id":"cil5u7rzs0000x4w8fy62qnqd","tag_id":"cil5u7s070002x4w8kyhdgo53","_id":"cil5u7s090005x4w8r1toxvgl"},{"post_id":"cil5u7rzs0000x4w8fy62qnqd","tag_id":"cil5u7s080003x4w83rbagy83","_id":"cil5u7s090006x4w88dq0pbb9"},{"post_id":"cil5u7s190009x4w83alt4zkf","tag_id":"cil5u7s1b000ax4w82tah6k01","_id":"cil5u7s1d000ex4w8rq73yhkc"},{"post_id":"cil5u7s190009x4w83alt4zkf","tag_id":"cil5u7s1b000bx4w8972rrle9","_id":"cil5u7s1d000fx4w8tfno2sgt"},{"post_id":"cil5u7s190009x4w83alt4zkf","tag_id":"cil5u7s1c000cx4w8yxy8m1yo","_id":"cil5u7s1d000gx4w8tb17ghrf"},{"post_id":"cil5u7s190009x4w83alt4zkf","tag_id":"cil5u7s1c000dx4w8wbs6qr60","_id":"cil5u7s1e000hx4w8kwshyrcw"},{"post_id":"cil5u7s1h000ix4w8y4jjkinm","tag_id":"cil5u7s1i000jx4w8e4jhri0j","_id":"cil5u7s1m000ox4w8wuex0787"},{"post_id":"cil5u7s1h000ix4w8y4jjkinm","tag_id":"cil5u7s1j000kx4w8yoo5kyyd","_id":"cil5u7s1m000px4w8o26g2wt9"},{"post_id":"cil5u7s1h000ix4w8y4jjkinm","tag_id":"cil5u7s1k000lx4w83bidop4v","_id":"cil5u7s1m000qx4w8aquou9od"},{"post_id":"cil5u7s1h000ix4w8y4jjkinm","tag_id":"cil5u7s1k000mx4w8iil7spw7","_id":"cil5u7s1m000rx4w8isnsvh5s"},{"post_id":"cil5u7s1h000ix4w8y4jjkinm","tag_id":"cil5u7s1l000nx4w8h98wzjw3","_id":"cil5u7s1m000sx4w8kai2qz0s"},{"post_id":"cil5u7s1p000tx4w8wdg9w23d","tag_id":"cil5u7s1s000ux4w80jqaja64","_id":"cil5u7s1u000xx4w8hjvxv67g"},{"post_id":"cil5u7s1p000tx4w8wdg9w23d","tag_id":"cil5u7s040001x4w8rw82v8g8","_id":"cil5u7s1u000yx4w851azi1tp"},{"post_id":"cil5u7s1p000tx4w8wdg9w23d","tag_id":"cil5u7s1t000vx4w84ht159gu","_id":"cil5u7s1v000zx4w8cki1cako"},{"post_id":"cil5u7s1p000tx4w8wdg9w23d","tag_id":"cil5u7s1u000wx4w8x4vyb6c4","_id":"cil5u7s1v0010x4w86w1uvg2z"},{"post_id":"cil5u7s1w0011x4w8m6uptp36","tag_id":"cil5u7s210012x4w87p65z6hc","_id":"cil5u7s220015x4w87pppoxkx"},{"post_id":"cil5u7s1w0011x4w8m6uptp36","tag_id":"cil5u7s220013x4w8b6nhwkxy","_id":"cil5u7s230016x4w80t3avwf7"},{"post_id":"cil5u7s1w0011x4w8m6uptp36","tag_id":"cil5u7s220014x4w81eawva3s","_id":"cil5u7s230017x4w8td5ie5ht"},{"post_id":"cil5u7s260018x4w8b8l3pemo","tag_id":"cil5u7s210012x4w87p65z6hc","_id":"cil5u7s270019x4w876crb4nz"},{"post_id":"cil5u7s260018x4w8b8l3pemo","tag_id":"cil5u7s220013x4w8b6nhwkxy","_id":"cil5u7s28001ax4w8wk0h3vvs"},{"post_id":"cil5u7s260018x4w8b8l3pemo","tag_id":"cil5u7s220014x4w81eawva3s","_id":"cil5u7s28001bx4w856o4ukpo"},{"post_id":"cil5u7s2a001cx4w8zsnbw23s","tag_id":"cil5u7s2b001dx4w81hm931cw","_id":"cil5u7s2c001fx4w8f5j0fvbr"},{"post_id":"cil5u7s2a001cx4w8zsnbw23s","tag_id":"cil5u7s2c001ex4w8ehvwc0bp","_id":"cil5u7s2c001gx4w87s1l1dvh"},{"post_id":"cil5u7s2g001hx4w8wgwikcfk","tag_id":"cil5u7s1t000vx4w84ht159gu","_id":"cil5u7s2j001kx4w8x1t5sqiw"},{"post_id":"cil5u7s2g001hx4w8wgwikcfk","tag_id":"cil5u7s2i001ix4w8pus11e5d","_id":"cil5u7s2j001lx4w8e6t4gqow"},{"post_id":"cil5u7s2g001hx4w8wgwikcfk","tag_id":"cil5u7s2i001jx4w8m72smdh0","_id":"cil5u7s2j001mx4w8jj9jsvbu"},{"post_id":"cil5u7s2g001hx4w8wgwikcfk","tag_id":"cil5u7s1c000cx4w8yxy8m1yo","_id":"cil5u7s2j001nx4w856od1g5c"},{"post_id":"cil5u7s2l001ox4w8iqhae36v","tag_id":"cil5u7s2n001px4w81ixo3rpa","_id":"cil5u7s2n001rx4w86mzvvddo"},{"post_id":"cil5u7s2l001ox4w8iqhae36v","tag_id":"cil5u7s1t000vx4w84ht159gu","_id":"cil5u7s2o001sx4w8x8z6gity"},{"post_id":"cil5u7s2l001ox4w8iqhae36v","tag_id":"cil5u7s2n001qx4w8uv86cfe9","_id":"cil5u7s2o001tx4w8gtkjq6pw"},{"post_id":"cil5u7s2q001ux4w86jlvxjk2","tag_id":"cil5u7s2n001px4w81ixo3rpa","_id":"cil5u7s2s001xx4w8qdbao31y"},{"post_id":"cil5u7s2q001ux4w86jlvxjk2","tag_id":"cil5u7s2r001vx4w8gfcu1rmo","_id":"cil5u7s2s001yx4w8nsrkb3fx"},{"post_id":"cil5u7s2q001ux4w86jlvxjk2","tag_id":"cil5u7s2s001wx4w869000a6r","_id":"cil5u7s2s001zx4w8z2jbba8k"}],"Tag":[{"name":"project","_id":"cil5u7s040001x4w8rw82v8g8"},{"name":"prototype","_id":"cil5u7s070002x4w8kyhdgo53"},{"name":"organization","_id":"cil5u7s080003x4w83rbagy83"},{"name":"linux","_id":"cil5u7s1b000ax4w82tah6k01"},{"name":"distro","_id":"cil5u7s1b000bx4w8972rrle9"},{"name":"lifestyle","_id":"cil5u7s1c000cx4w8yxy8m1yo"},{"name":"OS","_id":"cil5u7s1c000dx4w8wbs6qr60"},{"name":"Linux","_id":"cil5u7s1i000jx4w8e4jhri0j"},{"name":"static","_id":"cil5u7s1j000kx4w8yoo5kyyd"},{"name":"generators","_id":"cil5u7s1k000lx4w83bidop4v"},{"name":"jekyll","_id":"cil5u7s1k000mx4w8iil7spw7"},{"name":"pages","_id":"cil5u7s1l000nx4w8h98wzjw3"},{"name":"coffeescript","_id":"cil5u7s1s000ux4w80jqaja64"},{"name":"frontend","_id":"cil5u7s1t000vx4w84ht159gu"},{"name":"languages","_id":"cil5u7s1u000wx4w8x4vyb6c4"},{"name":"control","_id":"cil5u7s210012x4w87p65z6hc"},{"name":"versionamento","_id":"cil5u7s220013x4w8b6nhwkxy"},{"name":"git","_id":"cil5u7s220014x4w81eawva3s"},{"name":"MongoDB","_id":"cil5u7s2b001dx4w81hm931cw"},{"name":"NoSQL","_id":"cil5u7s2c001ex4w8ehvwc0bp"},{"name":"life","_id":"cil5u7s2i001ix4w8pus11e5d"},{"name":"comunity","_id":"cil5u7s2i001jx4w8m72smdh0"},{"name":"angularjs","_id":"cil5u7s2n001px4w81ixo3rpa"},{"name":"html5","_id":"cil5u7s2n001qx4w8uv86cfe9"},{"name":"filtros","_id":"cil5u7s2r001vx4w8gfcu1rmo"},{"name":"javascript","_id":"cil5u7s2s001wx4w869000a6r"}]}}